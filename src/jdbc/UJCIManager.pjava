/**
 * Title:        CUBRID Java Client Interface<p>
 * Description:  CUBRID Java Client Interface<p>
 * @version 2.0
 */

package cubrid.jdbc.jci;

#ifdef SERVER_SIDE_JDBC
import com.cubrid.jsp.ExecuteThread;
#endif

import java.util.ArrayList;
import java.util.Hashtable;
/*
 * CUBRID JDBC Driver의 request에 의해 CAS와의 connection을 담당하는 UConnection
 * object를 만들고 관리하는 class이다.
 *
 * since 1.0
 */

abstract public class UJCIManager {

/*=======================================================================
 |	STATIC VARIABLES
 =======================================================================*/

// static Vector connectionList;
static String sysCharsetName;
static Hashtable url_cache_table;
static ArrayList url_cache_remove_list;
static JdbcCacheWorker CACHE_Manager;
static boolean result_cache_enable = true;

static {
  // connectionList = new Vector();
  sysCharsetName = System.getProperty("file.encoding");
  url_cache_table = new Hashtable(10);
  url_cache_remove_list = new ArrayList(10);
  
  try {
    CACHE_Manager = new JdbcCacheWorker();
    CACHE_Manager.setDaemon(true);
    CACHE_Manager.start();
  } catch (Exception e) {
    e.printStackTrace();
    result_cache_enable = false;
  }
}

/*=======================================================================
 |	PUBLIC METHODS
 =======================================================================*/

/*
 * 주어진 정보에 해당하는 machine과의 Connection을 담당하는 UConnection object를
 * 만들고 class UJCIManager에서 관리하는 connection list에 그 object를 추가하는
 * method이다.
 */

public static UConnection connect(String ip, int port,
				      String name, String user, String passwd)
		throws java.sql.SQLException
{
  UConnection connection;

  connection = new UConnection(ip, port, name, user, passwd);
  // connectionList.add(connection);
  return connection;
}

static UUrlCache getUrlCache(UUrlHostKey key)
{
  UUrlCache url_cache;
  url_cache = (UUrlCache) url_cache_table.get(key);
  if (url_cache != null)
    return url_cache;

  synchronized (url_cache_table) {
    url_cache = (UUrlCache) url_cache_table.get(key);
    if (url_cache == null) {
      url_cache = new UUrlCache();
      url_cache_table.put(key, url_cache);
      synchronized (url_cache_remove_list) {
        url_cache_remove_list.add(url_cache);
      }
    }
  }

  return url_cache;
}
#ifdef SERVER_SIDE_JDBC
public static UConnection connectDefault() throws java.sql.SQLException {
    ExecuteThread curThread = (ExecuteThread)Thread.currentThread();
    return new UConnection(curThread.getSocket(), curThread);
}
#endif

/*
 * delete the UConnection object from connection list

synchronized static boolean deleteInList (UConnection element)
{
  if (connectionList.contains(element)==false)
    return false;

  return connectionList.remove(element);
}
*/

} // end of class UJCIManager

class JdbcCacheWorker extends Thread {
  public void run() {
    while(true) {
      long curTime = System.currentTimeMillis();
      for (int i=0 ; i < UJCIManager.url_cache_remove_list.size() ; i++) {
        UUrlCache uc = (UUrlCache) UJCIManager.url_cache_remove_list.get(i);
        uc.remove_expired_stmt(curTime);
      }
      try {
        Thread.sleep(1000);
      } catch (InterruptedException e) {
      }
    }
  }
}

