
////////////////////////////////////////////////////////////////////////////////
//                                                                            
//  IIIIIII SSSSSS                                                            
//    II    SS                          InstallShield (R)                     
//    II    SSSSSS      (c) 1996-2000, InstallShield Software Corporation     
//    II        SS      (c) 1990-1996, InstallShield Corporation              
//  IIIIIII SSSSSS                     All Rights Reserved.                   
//                                                                            
//                                                                            
//  This code is generated as a starting setup template.  You should   
//  modify it to provide all necessary steps for your setup.
//                                                                            
//                                                                            
//    File Name:  Setup.rul                                                   
//                                                                            
//  Description:  InstallShield script                                        
//                                                                            
//     Comments:  This template script performs a basic setup. With minor           
//                modifications, this template can be adapted to create       
//                new, customized setups.
//
////////////////////////////////////////////////////////////////////////////////


// Include header files
    
#include "ifx.h" //DO NOT REMOVE 
////////////////////// string defines ////////////////////////////

//////////////////// installation declarations ///////////////////

// ----- DLL function prototypes -----


    // your DLL function prototypes

#include "../../../version.h"

// ---- script function prototypes -----
prototype   BOOL USER.SendMessageTimeout(HWND, SHORT, SHORT, POINTER, SHORT, SHORT, POINTER);
prototype   BOOL Shell32.SHGetSpecialFolderPathA(HWND,BYREF STRING , NUMBER, BOOL);

// CodePage 확인을 위해 Kernel32.dll로 부터 GetACP()를 Import
prototype NUMBER Kernel32.GetACP();

// your script function prototypes
prototype RefreshEnvironment();
prototype makeconf(STRING);

// your global variables
STRING  nSetupType;
STRING  szTextDeskTopIcon, szTextQuickLaunchIcon, szTextStartMenuIcon;
NUMBER  nvCheckDeskTopIcon, nvCheckQuickLaunchIcon, nvCheckStartMenuIcon;
STRING  szVersionName, szVersionName1, szVersionName2;
LIST    szVersionList;
BOOL    cp_old_dbtxt;
BOOL    remove_completely, old_conf;
// CodePage 체크를 위한 Global variable 선언
NUMBER  nvCodePage;

//#define HWND_BROADCAST        0xFFFF
#define WM_SETTINGCHANGE      0x001A
#define SMTO_ABORTIFHUNG      0x0002

#define SD_AGREE				14
#define SD_DISAGREE				15
#define SD_CUSTOM_LICENSE                 104
#define	ST_CUBRID_VERSION		@PRODUCT_VERSION
#define ODBC_VERSION            @PRODUCT_VERSION

#ifndef STILL_ACTIVE
	#define STILL_ACTIVE    0x00000103
#endif

prototype RunProgram(STRING, STRING, NUMBER, NUMBER, NUMBER, BYREF NUMBER);
prototype BOOL kernel32.CreateProcessA(POINTER, BYVAL STRING, POINTER, 
               POINTER, BOOL, NUMBER, POINTER, POINTER, POINTER, 
               POINTER);
prototype BOOL kernel32.GetExitCodeProcess(NUMBER, POINTER);
prototype NUMBER kernel32.WaitForSingleObject(NUMBER, NUMBER);
prototype BOOL kernel32.CloseHandle(HWND);

function RunProgram(szProgram, szCmdLine, nWait, nShow, nTimeOut, nvExitCode)
    STARTUPINFO siData;
    PROCESS_INFORMATION piData;
begin
   	siData.cb = 68;
	siData.lpReserved = NULL;
	siData.lpDesktop = NULL;
	siData.lpTitle = NULL;
	siData.dwX = 0;
	siData.dwY = 0;
	siData.dwXSize = 0;
	siData.dwYSize = 0;
	siData.dwXCountChars = 0;
	siData.dwYCountChars = 0;
	siData.dwFillAttribute = 0;
	siData.dwFlags = 1;
	siData.wShowWindow = nShow;
	siData.lpReserved2 = NULL;
	siData.hStdInput = NULL;
	siData.hStdOutput = NULL;
	siData.hStdError = NULL;

    if (CreateProcessA(NULL, szProgram + " " + szCmdLine, NULL, NULL,
                       TRUE, 0, NULL, NULL, &siData, &piData) = 0) then
       return (-1);
    endif;

	if ( nWait != WAIT ) then
       nvExitCode = 0;
       return 0;
	endif;
	
    WaitForSingleObject(piData.hProcess, nTimeOut);

    GetExitCodeProcess(piData.hProcess, &nvExitCode);

    CloseHandle(piData.hProcess);
    CloseHandle(piData.hThread);    

    return 0;
end;

function OnMaintUIBefore()
	STRING svResult, szCaption, PROGRAM, szMsg;
	NUMBER nResult, nType, nvSize, ExitCode;
	STRING unInstallString, szKey, szNale, szName;
begin    
    //Maintenance Mode
   	nResult = StrFind(CMDLINE, "CUB_UNINSTALL");

    // 현재 System의 Code page를 가져온다.
    nvCodePage = GetACP();
   	
  	if (nResult < 0) then    
  		if( nvCodePage = 949 ) then
	   		MessageBox("큐브리드가 이미 설치되어 있습니다. 먼저 제어판의 '프로그램 제거'기능을 통해 이전 버전을 제거한 후 다시 시도해주기 바랍니다.", SEVERE); 
  		else
	   		MessageBox("CUBRID is already installed. First of all, please remove old version in Control Panel. And then, retry setup.", SEVERE);
        endif;
        exit;
	endif;	
	
	svResult = SdLoadString(IFX_MAINTUI_MSG);
	szCaption = SdLoadString(IFX_ONMAINTUI_CAPTION);
	nResult = SprintfBox(MB_OKCANCEL,szCaption,"%s",svResult);
	remove_completely = FALSE;
	
	if (nResult = IDOK) then 
	    szMsg = "데이터베이스와 설정파일을 모두 삭제 하시겠습니까?\r\n" + 
	            "데이터베이스를 다시 사용하려면 '아니오'를 선택하시기 바랍니다.";
	    szCaption = "데이터베이스 삭제 확인";
	    nResult = SprintfBox(MB_YESNO, szCaption, "%s", szMsg);
	    if (nResult = IDYES) then
			remove_completely = TRUE;
  		endif;

		SetStatusWindow(0, "");
		Enable(STATUSEX);
		StatusUpdate(ON, 100);
		FeatureRemoveAll();		
	else
		exit;		
	endif;
end;

function OnMaintUIAfter()
	STRING restart_source_path;
	STRING setupfilecopy_program, setupfilecopy_source, setupfilecopy_target;
	int	   ExitCode;
	BOOL   bOpt1, bOpt2;
begin
	RunProgram(WINSYSDIR + "\\cmd.exe", " /c RD /S /Q " + TARGETDIR ^ "tmp", NOWAIT, SW_HIDE, -1, ExitCode) ;
	RunProgram(WINSYSDIR + "\\cmd.exe", " /c RD /S /Q " + TARGETDIR ^ "var", NOWAIT, SW_HIDE, -1, ExitCode) ;
	RunProgram(WINSYSDIR + "\\cmd.exe", " /c RD /S /Q " + TARGETDIR ^ "log", NOWAIT, SW_HIDE, -1, ExitCode) ;
	RunProgram(WINSYSDIR + "\\cmd.exe", " /c RD /S /Q " + TARGETDIR ^ "cubridmanager", NOWAIT, SW_HIDE, -1, ExitCode) ;
	RunProgram(WINSYSDIR + "\\cmd.exe", " /c RD /S /Q " + TARGETDIR ^ "doc", NOWAIT, SW_HIDE, -1, ExitCode) ;
   
	if (remove_completely = TRUE) then
		RunProgram(WINSYSDIR + "\\cmd.exe", " /c RD /S /Q " + TARGETDIR^"conf", NOWAIT, SW_HIDE, -1, ExitCode) ;
		RunProgram(WINSYSDIR + "\\cmd.exe", " /c RD /S /Q " + TARGETDIR^"databases", NOWAIT, SW_HIDE, -1, ExitCode) ;
		RunProgram(WINSYSDIR + "\\cmd.exe", " /c RD /Q" + TARGETDIR, NOWAIT, SW_HIDE, -1, ExitCode) ;
	endif;
	
	DeleteProgramFolder ("CUBRID");
	RunProgram(WINSYSDIR + "\\cmd.exe", " /c RD /Q " + TARGETDIR, NOWAIT, SW_HIDE, -1, ExitCode) ;

   	SdFinish("", "Uninstall operation has been completed.", "", "", "", bOpt1, bOpt2);
end;

//////////////////////////////////////////////////////////////////////////////
//                                                                           
//  FUNCTION:   OnFirstUIBefore                                            
//                                                                           
//  EVENT:      FirstUIBefore event is sent when installation is run for the first
//              time on given machine. In the handler installation usually displays
//              UI allowing end user to specify installation parameters. After this
//              function returns, ComponentTransferData is called to perform file
//              transfer.
//                                                                           
///////////////////////////////////////////////////////////////////////////////
function OnFirstUIBefore()
    NUMBER  nResult;
    STRING  szTitle, szMsg, szSummaryMsg;
    STRING  szLicenseFile, szQuestion;
    STRING  szTargetPath;
    STRING  szDir, PROGRAM;
    STRING  szfolder, szTarget;
    STRING  szComponents, szTargetdir;
    STRING  szValue, szPath, svResult;
    NUMBER  nLevel, ExitCode;
    LIST    listStartCopy;
    NUMBER  nvSize, nvType;

    NUMBER	nVS, nUniSQL, nUniCAS, nEMSServer, nEMSClient;

	STRING 	szName, szCompany, szSerial;   
	NUMBER nReserved;
	BOOL    bNKey;
	BOOL jvm_fail;
	BOOL javaw_fail;
	STRING ordblist_txt;
	STRING java_msg, svValue, szKey, regJavaLibTarget, regTemp;
begin	
    // TO DO: if you want to enable background, window title, and caption bar title
    // SetTitle( @TITLE_MAIN, 24, WHITE );
    // SetTitle( @TITLE_CAPTIONBAR, 0, BACKGROUNDCAPTION );
    // Enable( FULLWINDOWMODE );
    // Enable( BACKGROUND );
    // SetColor(BACKGROUND,RGB (0, 128, 128));
	// Set Initial value

	UNINSTALL_STRING = UNINSTALL_STRING + " CUB_UNINSTALL";
	nvCheckDeskTopIcon = TRUE;
	nvCheckQuickLaunchIcon = FALSE;
	nvCheckStartMenuIcon = TRUE;
/*		
	szVersionList = ListCreate(STRINGLIST);
    StrGetTokens(szVersionList, @PRODUCT_VERSION, ".");
    ListGetFirstString(szVersionList, szVersionName1);
    ListGetNextString(szVersionList, szVersionName2);
    szVersionName = szVersionName1 + "." + szVersionName2;
    ListDestroy(szVersionList);	    
*/
    szVersionName = @PRODUCT_VERSION;    
    // 현재 System의 Code page를 가져온다.
    nvCodePage = GetACP();
    
Dlg_Start:
    // beginning of dialogs label
    TARGETDIR = "C:\\CUBRID";
    szDir = TARGETDIR;
    SHELL_OBJECT_FOLDER = @FOLDER_NAME;

Dlg_SdWelcome:
    szTitle = "CUBRID " + ST_CUBRID_VERSION + " for Windows";       
    if (nvCodePage = 949 ) then
    	szMsg   = "본 설치 프로그램은 컴퓨터에 큐브리드를 설치할 것입니다.\n\n"+
    	          "CUBRID 2008 R1.x 또는 이하 버전에서 생성된 큐브리드 데이터베이스는\n"+
    	          "CUBRID " + ST_CUBRID_VERSION + "와 호환되지 않습니다. CUBRID " +
    	          ST_CUBRID_VERSION + " 에서 사용하려면\n마이그레이션이 필요합니다.";
    else
    	szMsg   = "\n\nThis program will install CUBRID on your computer\n";    	
	endif;

    nResult = SdWelcome( szTitle, szMsg );
    if (nResult = BACK) goto Dlg_Start;

Dlg_SdAskDestPath: 
	if ( nvCodePage = 949 ) then
	    SetDialogTitle (DLG_ASK_PATH, "설치 디렉토리 입력"); 
	    szMsg = "큐브리드를 설치할 대상 디렉토리를 입력하십시오.\n";
//    	szMsg = "호환 가능한 이전 버전의 큐브리드 데이터베이스를 현재 설치되는 큐브리드에서도 재사용할 수 있습니다. 이를 위해서는 이전 버전의 큐브리드가 설치된 대상 디렉토리에  반드시 설치되어야 합니다.\n";
	else
	    SetDialogTitle (DLG_ASK_PATH, "Enter the target directory"); 
	    szMsg = "Please enter the target directory";
//    	szMsg = "Note that a database used in an old version of CUBRID could be reused in the new installation. To achieve this, you must specify the target directory as the same as the directory under which the old version of CUBRID used to be installed.\n";
    endif;
    
    if ( AskPath( szMsg, TARGETDIR, szTarget ) = BACK ) then
       if (bNKey) then 
          goto Dlg_SdAskDestPath;
       else 
          goto Dlg_SdWelcome;
       endif;
    endif;

    if (szTarget % " ") then
    	if ( nvCodePage = 949 ) then
    		MessageBox("대상 디렉토리 경로명에는 공백이 포함될 수 없습니다.", SEVERE);
    	else
    		MessageBox("White Space in The Destination Directory Path is Invalid.", SEVERE);
    	endif;
    	TARGETDIR = szTarget;
    	goto Dlg_SdAskDestPath;
    endif;

    if (ExistsDir (szTarget) = EXISTS) then
    	if ( nvCodePage = 949 ) then
    		szMsg = "입력한 디렉토리 " + szTarget + "는 이미 존재합니다. 설치를 계속 진행한다면 이전 버전의 파일들이 본 버전의 파일로 덮어쓰기 될 것입니다. 계속 진행하시겠습니까?";
    	else
    		szMsg = "The directory " + szTarget + " already exists.  Older files will be overwritten if you continue.  Do you wish to continue?";
    	endif;
       if (AskYesNo (szMsg, NO) = NO) then
          szMsg = "";
          goto Dlg_SdAskDestPath;  
       endif;
    else 
      if (CreateDir (szTarget) < 0) then
          if ( nvCodePage = 949 ) then
           	MessageBox (szTarget + "디렉토리를 생성할 수 없습니다. 다시 시도하십시오.", SEVERE);   
          else
          	MessageBox ("Unable to create directory " + szTarget + "\nPlease try again.", SEVERE);   
          endif;
          goto Dlg_SdAskDestPath;        
       
      endif;   
      
    endif;
    
    TARGETDIR = szTarget;
    szDir = TARGETDIR;
    SHELL_OBJECT_FOLDER = @FOLDER_NAME;             

Dlg_SdLicense:                               
	if (nvCodePage = 949 ) then
    	szLicenseFile = SUPPORTDIR ^ "license.txt";
	    szTitle    = "CUBRID " + ST_CUBRID_VERSION + "  라이선스";
    	szMsg      = "라이선스 동의서" ;
    else
    	szLicenseFile = SUPPORTDIR ^ "license_eng.txt";
	    szTitle    = "CUBRID " + ST_CUBRID_VERSION + " License";
	    szMsg      = "License agreement";
    endif ;      
	szQuestion = "";
	nResult = SdLicense2(szTitle, "예 동의합니다", "아니오", szLicenseFile, FALSE);
    if (nResult = BACK) goto Dlg_SdAskDestPath;
    
Dlg_SetupType:
   	nvSize = 0;

	// if windows가 95, 98, ME 버젼이면 대화상자 보여주고 다음 단계로 넘어간다.
	if (SYSINFO.WIN9X.bWin9X) then
		if ( nvCodePage = 949 ) then 
			MessageBox("Windows 9X, Windows ME에서는 큐브리드 서버를 설치할 수 없고,\r\n 오직 클라이언트 구성요소만 설치 가능합니다.", WARNING);
		else
			MessageBox("CUBRID Server is not available in this OS(Windows 9X, Windows ME).\n\rOnly Client Components will be installed.", WARNING);
		endif;
		nSetupType = "CLIENT_ONLY";
		FeatureSetupTypeSet(MEDIA, "CLIENT_ONLY");

		// 공간 확인...		
	    FeatureCompareSizeRequired(MEDIA,TARGETDIR,nvSize);

	    if (nvSize != 0) then
         	MessageBox( szSdStr_NotEnoughSpace, WARNING );
	        goto Dlg_SdAskDestPath;
        endif;		
	else
		nSetupType = "ALL";
		if ( nvCodePage = 949 ) then
	    	szTitle    = "CUBRID " + ST_CUBRID_VERSION + " 설치 유형";
    		szMsg      = "설치유형을 선택 하십시오.";
		else
	    	szTitle    = "CUBRID " + ST_CUBRID_VERSION + " Setup Type";
    		szMsg      = "Select the setup type";
    	endif;
	    nResult = SdSetupTypeEx ( szTitle , szMsg , "" , nSetupType , 0 );

	    if (nResult = BACK) then
        	goto Dlg_SdLicense;
        endif;

	    FeatureCompareSizeRequired(MEDIA,TARGETDIR,nvSize);

	    if (nvSize != 0) then
         	MessageBox( szSdStr_NotEnoughSpace, WARNING );
	        goto Dlg_SetupType;
        endif;
    endif;

    if (nSetupType = "ALL") then
    	if ( nvCodePage = 949 ) then
    		szSummaryMsg = "설치타입: 큐브리드 서버 컴포넌트와 클라이언트 컴포넌트";
    	else
    		szSummaryMsg = "Setup Type : CUBRID Server Components and Client Components";
    	endif;
   	else             
   		if ( nvCodePage = 949 ) then
			szSummaryMsg = "설치타입: 큐브리드 클라이언트 컴포넌트";
   		else
			szSummaryMsg = "Setup Type : CUBRID Client Components";
		endif;
   	endif;

	if ( nvCodePage = 949 ) then
		szMsg = "다른 버전의 큐브리드가 각각 다른 기기에서 이용될 경우, \r\n큐브리드 서버" 
				+ szVersionName + " 은 큐브리드 클라이언트 " 
				+ szVersionName + " 과만 호환됩니다.\r\n계속 진행하시겠습니까?" ;
		szTitle = "호환성 정보";
	else
		szMsg = "In case a different version of the CUBRID product is being used in other machines,\r\nplease note that the CUBRID "
				+ szVersionName + " servers are only compatible with the CUBRID "
				+ szVersionName + " clients and vice versa.\r\nDo you want to continue?";
		szTitle = "Compatibility information";
	endif;
	nResult = SprintfBox(MB_YESNO, szTitle, "%s", szMsg);

	if (nResult == IDNO) then
   		goto Dlg_SetupType;
   	endif;

Dlg_AskShortcutPath:
	if ( nvCodePage = 949 ) then
	  szTitle = "바로가기 아이콘 생성";
	  szMsg = "바로 가기 아이콘을 생성하시려면 다음 옵션을 선택하시기 바랍니다.";
	  szTextDeskTopIcon = "데스크탑 아이콘 생성";
	  szTextQuickLaunchIcon = "빠른 실행 아이콘 생성";
	  szTextStartMenuIcon = "시작 메뉴 아이콘 생성";
	else
	  szTitle = "Additional Options";
	  szMsg = "Select Additional Options below for make shortcut icon.";
      szTextDeskTopIcon = "Make Desktop Icon";
	  szTextQuickLaunchIcon = "Make Quick Launch Icon";
	  szTextStartMenuIcon = "Make Start Menu Icon";
	endif;
	
	SetDialogTitle(DLG_ASK_OPTIONS, szTitle);


 	nResult = AskOptions (NONEXCLUSIVE, szMsg,
						szTextDeskTopIcon, nvCheckDeskTopIcon,
						szTextQuickLaunchIcon, nvCheckQuickLaunchIcon,
						szTextStartMenuIcon, nvCheckStartMenuIcon);

	if (nResult = BACK) then
		if (SYSINFO.WIN9X.bWin9X) then
			goto Dlg_SdLicense; 
		else
			goto Dlg_SetupType;
		endif;
	endif;

Dlg_SdStartCopy:
	if ( nvCodePage = 949 ) then
	   	szTitle = "CUBRID " + ST_CUBRID_VERSION + " 설치를 시작합니다";
	else
    	szTitle = "Start Install the CUBRID " + ST_CUBRID_VERSION;
	endif;
    //The following is an example of how to add a string(svName) to a list(listStartCopy).
    //eg. ListAddString(listStartCopy,svName,AFTER);
    listStartCopy = ListCreate( STRINGLIST );
    
	if ( nvCodePage = 949 ) then
		ListAddString(listStartCopy, "대상 디렉토리 : " + TARGETDIR, AFTER);
		ListAddString(listStartCopy, szSummaryMsg, AFTER);
		ListAddString(listStartCopy, "바로가기 아이콘 : ", AFTER);
	
		// Add short cut icon information that will be added.
		if (nvCheckDeskTopIcon = TRUE) then
			ListAddString(listStartCopy, "   데스크탑 아이콘 생성", AFTER);
		endif;
			
		if (nvCheckQuickLaunchIcon = TRUE) then
			ListAddString(listStartCopy, "   빠른실행 아이콘 생성", AFTER);
		endif;
			
		if (nvCheckStartMenuIcon = TRUE) then
			ListAddString(listStartCopy, "   시작 메뉴 아이콘 생성", AFTER);
		endif;	  
	else
		ListAddString(listStartCopy, "Target Directory : " + TARGETDIR, AFTER);
		ListAddString(listStartCopy, szSummaryMsg, AFTER);
		ListAddString(listStartCopy, "Short Cut Icon : ", AFTER);
	
		// Add short cut icon information that will be added.
		if (nvCheckDeskTopIcon = TRUE) then
			ListAddString(listStartCopy, "   Make Desktop Icon", AFTER);
		endif;
			
		if (nvCheckQuickLaunchIcon = TRUE) then
			ListAddString(listStartCopy, "   Make QuickLaunch Icon", AFTER);
		endif;
			
		if (nvCheckStartMenuIcon = TRUE) then
			ListAddString(listStartCopy, "   Make StartMenu Icon", AFTER);
		endif;
	endif;
	    		
    nResult = SdStartCopy( szTitle, "", listStartCopy );

    if (nResult = BACK) goto Dlg_AskShortcutPath;
  
    ListDestroy(listStartCopy);

    /* check if 2008 redistributable is installed */
    // 1. check registry key(redistributable)      
    nvType = REGDB_STRING;
    szValue = "";
    
   	szKey = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{9B775AA1-7B10-379A-9B16-7E373790568C}";

    RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	nResult = RegDBGetKeyValueEx (szKey, "DisplayVersion", nvType, szValue, nvSize);
	if (nResult < 0) then
	//		SprintfBox(WARNING, "", "SendMessageTimeout failed in RefreshEnvironment, Error %d", GetLastError());
	    
	    szTitle = "Microsoft Visual C++ 2008 재배포 가능 패키지";
	    szMsg = "Microsoft Visual C++ 2008 재배포 패키지가 설치되어 있지 않습니다.\r\n" +
	            "계속 설치를 진행할 경우 CUBRID 2008의 일부 구성요소가 정상적으로 동작하지 않을 수 있습니다.\r\n" +
	            "(상세 정보는 CUBRID 다운로드 페이지에서 확인 가능합니다.)\r\n\r\n" + 
	            "CUBRID 2008 설치를 중단 하시겠습니까?";

		nResult = SprintfBox(MB_YESNO, szTitle, "%s", szMsg);
        if (nResult = IDYES) then
	        exit;
	    endif;
    endif;
    
    /* check if jvm is installed */
    if (RunProgram("javaw.exe", "", WAIT, SW_HIDE, -1, ExitCode) < 0) then
		szMsg = "JAVA가 설치되어 있지 않거나 사용할 수 없는 상태이기 때문에 CUBRID 설치 완료 후 CUBRID Manager를 사용할 수 없습니다.\r\n" +
    			"CUBRID Manager를 사용하려면 CUBRID 설치 후 JAVA를 설치하시기 바랍니다.\r\n";
        MessageBox (szMsg, INFORMATION); 
    endif;

    szPath = TARGETDIR^"conf";
    LongPathToQuote (szPath, TRUE);
       
    if (FindFile ( szPath, "cubrid.conf", svResult ) = 0) then
      old_conf = TRUE;
    elseif (FindFile ( szPath, "cubrid_broker.conf", svResult ) = 0) then
      old_conf = TRUE;      
    elseif (FindFile ( szPath, "cm.conf", svResult ) = 0) then
      old_conf = TRUE;
    elseif (FindFile ( szPath, "cm.pass", svResult ) = 0) then
      old_conf = TRUE;
    elseif (FindFile ( szPath, "cmdb.pass", svResult ) = 0) then
      old_conf = TRUE;
    endif;
     
    if (old_conf = TRUE) then
	    szTitle = "설정 파일 유지";
	    szMsg = "설정파일(.conf또는 .pass파일)이 이미 존재합니다.\r\n기존 파일을 유지하시겠습니까?";
	    
		nResult = SprintfBox(MB_YESNO, szTitle, "%s", szMsg);
	    if (nResult = IDNO) then
	      old_conf = FALSE;
	    endif;
	endif;

    REGDB_OPTIONS = REGDB_OPTIONS | REGDB_OPTION_WOW64_64KEY;                        
    
    // setup default status
    SetStatusWindow(0, "");
    Enable(STATUSEX);
    StatusUpdate(ON, 100);

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   OnMoving
//
//  EVENT:      Moving event is sent when file transfer is started as a result of
//              ComponentTransferData call, before any file transfer operations 
//              are performed.
//
///////////////////////////////////////////////////////////////////////////////
function OnMoving()
    STRING szAppPath;
    STRING szProgramFolder; 
begin
    // Set LOGO Compliance Application Path 
    // TO DO : if your application .exe is in a subfolder of TARGETDIR then add subfolder 
    szProgramFolder = FOLDER_PROGRAMS^"CUBRID";
    
    szAppPath = TARGETDIR;
    RegDBSetItem(REGDB_APPPATH, szAppPath);
    RegDBSetItem(REGDB_APPPATH_DEFAULT, szAppPath ^ @PRODUCT_KEY);
    if (!MAINTENANCE) then
        if (nvCheckStartMenuIcon = TRUE) then
            szAppPath = UNINSTALL_STRING;
            AddFolderIcon( szProgramFolder, "Uninstall CUBRID", szAppPath, "", "", 0, "", REPLACE);
        endif;
    endif;
end;
 
function OnFileLocked(szFile)
	STRING msg;
	int	   nResult;
begin
	if (ExistsDir(szFile) == EXISTS) then // 디렉토리일때
		return ERR_IGNORE;
	else                                  // 파일일때
		if ( nvCodePage = 949 ) then
	 		msg = "잠금된 파일(" + szFile + ")이 발견되었습니다.\r\n큐브리드 서비스를 중지시키고, 모든 클라이언트 프로그램과 큐브리드 서비스 트레이를 종료후 계속 진행하십시오.\r\n";
	 		msg = msg + "계속 진행하시겠습니까?";
		else
	 		msg = "Locked file detected(" + szFile + ").\r\n" + " Please stop CUBRID service and terminate all client programs and CUBRID Service Tray. And then, retry uninstallation.";
	 	endif;
       if (AskYesNo (msg, YES) = NO) then
            msg = "삭제가 중단되었습니다.\r\n큐브리드 서비스를 중지시키고, 모든 클라이언트 프로그램과 큐브리드 서비스 트레이를 종료후, 다시 삭제해 주시기 바랍니다. ";
            MessageBox(msg, WARNING);
       		exit;
       else
            return ERR_RETRY;
       endif;
	endif;
end;

 
///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   OnFirstUIAfter
//
//  EVENT:      FirstUIAfter event is sent after file transfer, when installation 
//              is run for the first time on given machine. In this event handler 
//              installation usually displays UI that will inform end user that
//              installation has been completed successfully.
//
///////////////////////////////////////////////////////////////////////////////
function OnFirstUIAfter()
	//-------------------------------
	  #define WM_WININICHANGE 0x001A
	 
	  STRING szKey, szEnv;
	  POINTER pEnv;
	
	//-------------------------------   
	
	STRING szTitle, szMsg1, szMsg2, szOption1, szOption2,szTemp,szMsg, szTemp_host ;
	NUMBER bOpt1, bOpt2,nOption, nReserved;       
	NUMBER  nvFileHandle;  
	//NUMBER  nvHostkey;   
	NUMBER  nvHostkey;  
	STRING  stTARGETDIR;        
	
	STRING  svResult ;    
	STRING  szHostKeyTitle, szKeyTray ;
	    
	STRING  szQuestion ,svValue, svNumValue;
	NUMBER  lResult, lCount ,nAppDataCISDL, ExitCode;
	NUMBER  nResult,nResult1,nResult2,nResult3,nResult4,nResult5 ,nvSize,nvType  ;    
	STRING  PROGRAM , tmpTARGET, szProgramVSQL, szProgramEMC, szProgramQA, szAppDataPath, szQuickLaunchPath;
	STRING  szFolderQA, szQATarget;
	STRING  szDocCUBRIDManual;
	STRING  szDocTempFolder, szServiceTray;
	STRING  setupfilecopy_program, setupfilecopy_param;
begin
   szTitle = "";
   nOption   = SYS_BOOTMACHINE;
   szMsg2    = "Click Finish to exit %P setup.";
   nReserved = 0;

Dlg_Completed:
	// Make ShortCut icon
    szProgramEMC = TARGETDIR^"\\cubridmanager\\cubridmanager.exe";
	szProgramQA = TARGETDIR^"\\doc\\Q&A.lnk";
	szQATarget = WINSYSDIR + "\\Q&A.lnk";

    LongPathToQuote( szProgramEMC, TRUE );
    LongPathToQuote( szProgramQA, TRUE);
	LongPathToQuote( szQATarget, TRUE);

	CopyFile(szProgramQA, szQATarget);

	if (nvCheckDeskTopIcon = TRUE) then
		AddFolderIcon(FOLDER_DESKTOP, "CUBRID Manager Client", szProgramEMC,  TARGETDIR^"\\cubridmanager", "", 0, "", REPLACE );
	endif;
	
	Delay(1);
	
	if (nvCheckQuickLaunchIcon = TRUE) then
        UseDLL(WINSYSDIR ^ "Shell32.dll");

	    nAppDataCISDL=26;
	    if (SHGetSpecialFolderPathA(0, szAppDataPath, nAppDataCISDL,0)= TRUE) then
	    	szQuickLaunchPath=szAppDataPath^"Microsoft\\Internet Explorer\\Quick Launch";
        	AddFolderIcon(szQuickLaunchPath,"CUBRID Manager Client",szProgramEMC,TARGETDIR^"\\cubridmanager","",0,"",REPLACE);
        else
        	MessageBox("Adding Quick Launch Icon has been failed!", WARNING);
    	endif;

    	UnUseDLL(WINSYSDIR ^ "Shell32.dll");

	endif;
	
	Delay(1);
		
	if (nvCheckStartMenuIcon = TRUE) then
		nResult = CreateShellObjects( "" );

		szDocTempFolder = "CUBRID";
		CreateProgramFolder(szDocTempFolder);
					
		szDocCUBRIDManual = TARGETDIR^"\\\cubridmanager\\plugins\\com.cubrid.cubridmanager.help_"
		                    + VERSION_STRING + "\\html\\index.htm";
		LongPathToQuote( szDocCUBRIDManual, TRUE);
		AddFolderIcon (szDocTempFolder, "CUBRID Manual", szDocCUBRIDManual , TARGETDIR^"\\doc", "", 0, "", REPLACE);
		AddFolderIcon (TARGETDIR^"\\doc", "CUBRID Manual", szDocCUBRIDManual , TARGETDIR^"\\doc", "", 0, "", REPLACE);

		if (nSetupType = "ALL") then
			szServiceTray = TARGETDIR^"\\bin\\CUBRID_Service_Tray.exe";
			LongPathToQuote( szServiceTray, TRUE);
			AddFolderIcon(szDocTempFolder, "CUBRID Service Tray", szServiceTray, TARGETDIR^"\\bin" , "", 0, "", REPLACE );
		endif;

		AddFolderIcon( szDocTempFolder,"CUBRID Manager Client", szProgramEMC, TARGETDIR^"\\cubridmanager", "", 0, "", REPLACE );
    endif;
    
	Delay(1);
	
	SdFinish(szTitle, "", "", "", "", bOpt1, bOpt2);
	
	RunProgram(PROGRAMFILES^"Internet Explorer\\iexplore.exe","http://www.cubrid.com/developer.cub", NOWAIT, SW_SHOW, -1, ExitCode);

    if (nSetupType = "ALL") then
		// 인스톨후 CUBRID Service Tray 를 실행.
		PROGRAM = TARGETDIR + "\\bin\\CUBRID_Service_Tray.exe";
		LongPathToQuote (PROGRAM, TRUE);
		LaunchAppAndWait (PROGRAM, "", NOWAIT);
		
		PROGRAM = TARGETDIR + "\\bin\\ctrlService.exe";
		LongPathToQuote (PROGRAM, TRUE);
		LaunchAppAndWait (PROGRAM, "-start", NOWAIT);
	endif;
	
/*
	setupfilecopy_program = SRCDIR^"\\cubsetupcopy.bat";
	setupfilecopy_param = SRCDIR;                       
	LongPathToQuote(setupfilecopy_program, TRUE);
	LongPathToQuote(setupfilecopy_param, TRUE);
	RunProgram(setupfilecopy_program, "-d " + setupfilecopy_param, NOWAIT, SW_HIDE, -1, ExitCode);
*/
    REGDB_OPTIONS = REGDB_OPTIONS & ~REGDB_OPTION_WOW64_64KEY;
    return 0;
end;

function RefreshEnvironment()
	STRING      sParam;
	POINTER     pParam, pResult;
	LONG        lResult;
begin
	sParam      = "Environment";
	pParam      = &sParam;
	pResult     = &lResult;

	if (!SendMessageTimeout(HWND_BROADCAST, WM_WININICHANGE, 0, pParam, SMTO_ABORTIFHUNG, 300, pResult))
	then
//		MessageBox("failed...", SEVERE);
//		SprintfBox(WARNING, "", "SendMessageTimeout failed in RefreshEnvironment, Error %d", GetLastError());
	endif;
end;  

function makeconf(conffile)
	STRING  confcopy_program, conffilename, distfilename, versionfilename;
	STRING  cmd_arg;
	int	   ExitCode;
begin
	confcopy_program = SRCDIR^"\\makeconf.bat";
	conffilename = conffile;
	distfilename = conffilename+"-dist";
	versionfilename = conffilename + "."+szVersionName;
	
	LongPathToQuote(conffilename, TRUE);
	LongPathToQuote(distfilename, TRUE);
	LongPathToQuote(versionfilename, TRUE);
	cmd_arg = conffilename + " " + distfilename + " " + versionfilename;

    if (old_conf) then
    	cmd_arg = cmd_arg + " TRUE";
    else
    	cmd_arg = cmd_arg + " FALSE";
    endif;
    
    RunProgram(confcopy_program, cmd_arg, WAIT, SW_HIDE, -1, ExitCode);
end;
//---------------------------------------------------------------------------
// OnSetUpdateMode
//
// OnSetUpdateMode is called directly by the framework to set the UPDATEMODE
// InstallShield system variable appropriately to control which UI events
// are called by OnShowUI.
//
// Note: This event is called for all setups.
//---------------------------------------------------------------------------
function OnSetUpdateMode()
	number	nIgnore, nMediaFlags, nInstalledVersion, nUpdateVersion, nResult;
	string	szVersion, szIgnore, szMsg;
begin	
	UPDATEMODE = FALSE; // Non-update mode by default.
end;
#include "ComponentEvents.rul"
