
<html>
<head>
<title>마스터 데이터베이스 교체(수동)</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<link type="text/css" rel="stylesheet" href="../nhelp.css" />
<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
-->
</style>
<script type="text/javascript" language="javascript1.2" src="../whmsg.js"></script>
<script type="text/javascript" language="javascript" src="../whver.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whproxy.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whutils.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whlang.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whtopic.js"></script>

 <meta name="generator" content="Adobe RoboHelp 8" />
</head>
<body><script type="text/javascript" language="javascript1.2">//<![CDATA[
<!--
if (window.gbWhTopic)
{
	var strUrl = document.location.href;
	var bc = 0;
	var n = strUrl.toLowerCase().indexOf("bc-");
	if(n != -1)
	{
		document.location.href = strUrl.substring(0, n);
		bc = strUrl.substring(n+3);
	}

	if (window.addTocInfo)
	{
	addTocInfo("관리자 안내서\n데이터베이스 복제\n복제 설정\n마스터 데이터베이스 교체(수동)");
         if(strUrl.toLowerCase().indexOf("/help/")==-1){

    addButton("show",BTN_TEXT,"Show","","","","",0,0,"","","");

    }


	}
	if (window.writeBtnStyle)
		writeBtnStyle();

	if (window.writeIntopicBar)
		writeIntopicBar(1);if(strUrl.toLowerCase().indexOf("/help/")==-1){

         document.write("<p style=\"text-align:left\"> ");

AddMasterBreadcrumbs("../index.htm", "", "&nbsp;&gt;&nbsp;", "홈", "../cubrid.htm");

document.write("<a href=\"admin.htm\">관리자 안내서<\/a> &nbsp;&gt;&nbsp; <a href=\"admin_repl_concept.htm\">데이터베이스 복제<\/a> &nbsp;&gt;&nbsp; <a href=\"admin_repl_setup.htm\">복제 설정<\/a> &nbsp;&gt;&nbsp; 마스터 데이터베이스 교체(수동)<\/p>");}


	if (window.setRelStartPage)
	{
	setRelStartPage("../index.htm");

		autoSync(1);
		sendSyncInfo();
		sendAveInfoOut();
	}
}
else
	if (window.gbIE4)
		document.location.reload();

//-->
//]]></script>
<h4>마스터 데이터베이스 교체(수동)</h4>
<p>마스터 데이터베이스에 장애가 생겨 복구가 불가능한 경우 슬레이브 데이터베이스를 마스터 데이터베이스로 교체할 수 있다. 마스터 데이터베이스로 교체하기 위해서는 다음과 같은 조건을 만족해야 한다.</p>
<ul>
<li>마스터 데이터베이스의 모든 클래스에 기본 키가 설정되어 있어 슬레이브 데이터베이스로 복제가 되어야 한다.</li>
<li>마스터 데이터베이스의 최종 스키마 정보가 백업되어 있어 마스터 데이터베이스가 가진 사용자 계정, 설정된 인덱스와 트리거 정보를 얻을 수 있어야 한다.</li>
<li>슬레이브 데이터베이스의 복제용 계정을 삭제하려면 모든 작업이 완료된 후 수작업으로 삭제해야 한다.</li>
<li>마스터 데이터베이스에서 정의한 시리얼은 복구되지 않는다. 따라서 시리얼을 사용한 경우에는 모든 작업이 완료된 후 수작업으로 시리얼의 최대값을 조정해야 한다.</li>
</ul>
<p>슬레이브&#160;데이터베이스를 사용하여 마스터 데이터베이스를&#160;교체하는 과정은 다음과 같다.</p>
<h6>사전 단계: 마스터 데이터베이스 스키마 백업</h6>
<p>마스터 데이터베이스의 사용자 계정, 클래스, 인덱스, 트리거 등 스키마가 변경될 때마다 <span class="keyword">cubrid unloaddb</span> 유틸리티를 이용하여 항상 스키마 정보를 백업해야 한다.</p>
<p class="syntax"><span class="keyword">cubrid unloaddb -s –C</span> <span class="var">master_db_name</span></p>
<p><span class="keyword">cubrid unloaddb</span> 유틸리티 수행 결과로 master_db_name_schema와 master_db_name_trigger라는 파일이 생성되고 이 파일을 보관했다가 슬레이브 데이터베이스를 마스터 데이터베이스로 교체할 때 사용한다.</p>
<h6>단계 1: 슬레이브 데이터베이스 백업 및 복사</h6>
<p><span class="keyword">cubrid backupdb</span> 유틸리티를 이용한 전체 백업을 수행한 후 마스터 데이터베이스가 위치할 호스트로 백업 볼륨, 활성 로그 파일, 그리고 보관 로그 파일을 모두 복사한다.</p>
<p class="syntax"><span class="keyword">cubrid backupdb</span> <span class="var">slave_db_name</span></p>
<p>마스터 데이터베이스로 교체하기 위해서는 반드시 슬레이브 데이터베이스 전체를 백업해야 한다.&#160;백업 볼륨은 물론 활성 로그 파일 및 보관 로그 파일도 모두 복사해야 전체를 복구할 수 있다.</p>
<h6>단계 2: &#160;슬레이브 데이터베이스 복구 후 이름 변경</h6>
<p>마스터 호스트에서 백업 볼륨을 복구한 후 이름을 변경한다.</p>
<p class="syntax"><span class="keyword">cubrid restoredb</span> <span class="var">slave_db_name</span></p>
<p class="syntax"><span class="keyword">cubrid renamedb</span> <span class="var">slave_db_name master_db_name</span></p>
<p>만약, 슬레이브 호스트에서의 데이터베이스 볼륨 경로와 마스터 호스트에서의 데이터베이스 볼륨 경로가 다른 경우에는 <span class="keyword">cubrid restoredb</span>의 <span class="keyword">-n</span> 옵션을 이용하여 볼륨 경로를 이전 마스터 데이터베이스와 동일하게 지정한다. <span class="keyword">cubrid restoredb</span> 유틸리티에 대한 상세 설명은 <a href="admin_br_recovery.htm">데이터베이스 복구</a>를&#160;참조한다.</p>
<h6>단계 3: 사용자 계정 및 스키마 변경 사항 적용</h6>
<p>"사전 단계: 마스터 데이터베이스 스키마 백업"에서 보관했던 스키마 정보 파일을 이용하여 장애 이전 마스터 데이터베이스와 동일한 사용자 계정 및 인덱스를 생성한다.</p>
<p>master_db_name_schema 파일 첫 부분에는 <span class="keyword">DBA</span> 계정의 암호를 다시 생성하는 구문과 사용자 계정을 새로 생성하는 구문이 있다. 이미 슬레이브 데이터베이스에는 이 계정이 존재하므로 사용자 계정을 생성하는 구문을 사용자 계정을 찾는 구문으로 변경한다.</p>
<p class="syntax"><span class="keyword">call add_user</span>('REPL', '') <span class="keyword">on class db_root</span> to auser;</p>
<p>위 구문을 모두 찾아 아래 구문으로 변경한다.</p>
<p class="syntax"><span class="keyword">call find_user</span>('REPL') <span class="keyword">on class db_user</span> to auser;</p>
<p>master_db_name_schema 파일에는 마스터 데이터베이스의 스키마 생성 DDL이 저장되어 있으므로 이미 슬레이브 데이터베이스에 해당 스키마가 존재하는 경우 오류가 발생하는데 이 오류는 무시한다.</p>
<p class="syntax"><span class="keyword">csql -S -u</span> <span class="keyword">dba</span> <span class="keyword">-p</span> <span class="var">dba_passwd master_db_name</span> <span class="keyword">-e</span> <span class="keyword">-i</span> <span class="var">master_db_name_schema</span></p>
<h6>단계 4: 트리거 정의</h6>
<p>다음 단계는 동일한 방식으로 마스터에 정의된 트리거 정보를 다시 반영하는 작업이다.</p>
<p class="syntax"><span class="keyword">csql -S -u</span> <span class="keyword">dba</span> <span class="keyword">-p</span> <span class="var">dba_passwd master_db_name</span> <span class="keyword">-e -i</span> <span class="var">master_db_name_trigger</span></p>
<h6>사후 단계 1: 시리얼 조정</h6>
<p>시리얼 값이 복구되지 않으므로 시리얼의 현재 값을 수작업으로 조정한다.</p>
<p class="code">csql -S -u dba -p dba_passwd master_db_name<br />
drop serial a;<br />
call find_user('REPL') on class db_user to auser;<br />
create serial a<br />
&#160;&#160;&#160;&#160; start with 1743715<br />
&#160;&#160;&#160;&#160; increment by 1<br />
&#160;&#160;&#160;&#160; minvalue 1<br />
&#160;&#160;&#160;&#160; maxvalue 10000000000000000000000000000000000000<br />
&#160;&#160;&#160;&#160; nocycle;<br />
update db_serial set owner = :auser, started=1 where name= 'a';</p>
<h6>사후 단계 2: 복제 계정 삭제</h6>
<p>복제 계정을 삭제한다.</p>
<p class="syntax"><span class="keyword">csql -S -u dba -p</span> <span class="var">dba_passwd master_db_name</span> <span class="keyword">–c</span> "drop user <span class="var">repl_user</span>"</p>
<script type="text/javascript" language="javascript1.2">//<![CDATA[
<!--
if (window.writeIntopicBar)
	writeIntopicBar(0);


highlightSearch();
//-->
//]]></script>
</body>
</html>
