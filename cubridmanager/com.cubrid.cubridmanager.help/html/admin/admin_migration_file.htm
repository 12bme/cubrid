
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>가져오기용 파일 작성 방법</title>
 <meta name="generator" content="Adobe RoboHelp 8" />
<link type="text/css" rel="stylesheet" href="../nhelp.css" />
<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
-->
</style>
<script type="text/javascript" language="javascript1.2" src="../whmsg.js"></script>
<script type="text/javascript" language="javascript" src="../whver.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whproxy.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whutils.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whlang.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whtopic.js"></script>

</head>
<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red"><script type="text/javascript" language="javascript1.2">//<![CDATA[
<!--
if (window.gbWhTopic)
{
	var strUrl = document.location.href;
	var bc = 0;
	var n = strUrl.toLowerCase().indexOf("bc-");
	if(n != -1)
	{
		document.location.href = strUrl.substring(0, n);
		bc = strUrl.substring(n+3);
	}

	if (window.addTocInfo)
	{
	addTocInfo("관리자 안내서\n데이터베이스 마이그레이션\n가져오기용 파일 작성 방법");
         if(strUrl.toLowerCase().indexOf("/help/")==-1){

    addButton("show",BTN_TEXT,"Show","","","","",0,0,"","","");

    }


	}
	if (window.writeBtnStyle)
		writeBtnStyle();

	if (window.writeIntopicBar)
		writeIntopicBar(1);if(strUrl.toLowerCase().indexOf("/help/")==-1){

         document.write("<p style=\"text-align:left\"> ");

AddMasterBreadcrumbs("../index.htm", "", "&nbsp;&gt;&nbsp;", "홈", "../cubrid.htm");

document.write("<a href=\"admin.htm\">관리자 안내서<\/a> &nbsp;&gt;&nbsp; <a href=\"admin_migration_migration.htm\">데이터베이스 마이그레이션<\/a> &nbsp;&gt;&nbsp; 가져오기용 파일 작성 방법<\/p>");}


	if (window.setRelStartPage)
	{
	setRelStartPage("../index.htm");

		autoSync(1);
		sendSyncInfo();
		sendAveInfoOut();
	}
}
else
	if (window.gbIE4)
		document.location.reload();

//-->
//]]></script>
<h3>가져오기용 파일 작성 방법</h3>
<p><span class="keyword">cubrid loaddb</span> 유틸리티에서 사용되는 객체 입력 파일을 직접 작성하여 사용하면 데이터베이스에 대량의 데이터를 보다 신속하게 추가할 수 있다. 객체 입력 파일은 간단한 테이블 모양의 형식으로 구성되며 주석, 명령 라인, 데이터 라인으로 이루어진 텍스트 파일이다.</p>
<h5>주석</h5>
<p>CUBRID에서는&#160;주석은 두 개의&#160;연속된 하이픈(--)을 이용하여 처리한다.</p>
<p class="code">-- This is a comment!</p>
<h5>명령 라인</h5>
<p>명령 라인은 퍼센트(%) 문자로 시작하며, 명령어로는 클래스를 정의하는 <span class="keyword">%class</span> 명령어와, 클래스 식별을 위해 사용하는 별칭(alias)이나 식별자(identifier)를 정의하는 <span class="keyword">%id</span> 명령어가 있다.</p>
<a name="id" id="id"></a>
<h6>클래스에 식별자 부여</h6>
<p><span class="keyword">%id</span>를 이용하여 참조 관계에 있는 클래스에 식별자를 부여할 수 있다.</p>
<p class="label">구문</p>
<p class="syntax"><span class="keyword">%id</span> <span class="var">class_name</span> <span class="var">class_id</span><br />
<span class="var">class_name</span>:<br />
&#160;&#160;&#160; identifier<br />
<span class="var">class_id</span>:<br />
&#160;&#160;&#160; integer<br /></p>
<p class="definition"><span class="keyword">%id</span> 명령어에 의해 명시된 <span class="var">class_name</span>은 해당 데이터베이스에 정의된 클래스 이름이며, <span class="var">class_id</span>는 객체 참조를 위해 부여한 숫자형 식별자를 의미한다.</p>
<p class="label">예제 1</p>
<p class="code">%id employee 21<br />
%id&#160;office 22<br />
%id project 23<br />
%id phone 24</p>
<h6>클래스 및 속성 명시</h6>
<p><span class="keyword">%class</span> 명령어를 이용하여 데이터가 로딩될 클래스 및 속성을 명시하며,&#160;명시된 속성의 순서에 따라 데이터 라인이 작성되어야 한다.</p>
<p class="label">구문</p>
<p class="syntax"><span class="keyword">%class</span> <span class="var">class_name</span> ( <span class="var">attr_name</span> [ { <span class="var">attr_name</span> }_ ]</p>
<p class="definition">데이터를 로딩하고자 하는 데이터베이스에는&#160;이미 스키마가 정의되어 있어야 한다.</p>
<p class="definition"><span class="keyword">%class</span> 명령어에 의해 명시된 <span class="var">class_name</span>은 해당 데이터베이스에 정의된 클래스 이름이며, <span class="var">attr_name</span>는 정의된 속성 이름을 의미한다.</p>
<p class="label">예제 2</p>
<p class="definition">다음은 employee라는 클래스에 데이터를 입력하기 위하여 <span class="keyword">%class</span> 명령으로 클래스 및 3개의 속성을 명시한 예제이다.&#160;<span class="keyword">%class</span> 명령 다음에 나오는 데이터 라인에서는 3개의 데이터가&#160;입력되어야 하며, 이는 "참조 관계 설정하기"의 <a href="#ex3">예제&#160;3</a>을 참조한다.</p>
<p class="code">%class employee (name age department)</p>
<h5>데이터 라인</h5>
<p>데이터 라인은 <span class="keyword">%class</span> 명령 라인 다음에 위치하며, 입력되는 데이터는 <span class="keyword">%class</span> 명령에 의해 명시된 클래스 속성과 타입이 일치해야 한다. 만약, 명시된 속성과 타입이 일치하지 않으면 데이터 로드 작업은 중지된다.</p>
<p>또한,&#160;각각의 속성에 대응되는 데이터는 적어도 하나의 공백에 의해 분리되어야 하며, 1라인에 작성되는 것이 원칙이다. 다만, 입력되는 데이터가 많은 경우에는 첫 번째 데이터 라인의 맨 마지막 데이터 다음에 플러스 기호(+)를 명시하여 다음 라인에 데이터를 연속적으로 입력할 수 있다. 이 때, 맨 마지막 데이터와 플러스 기호 사이에는 공백이 허용되지 않음을 유의한다.</p>
<h6>인스턴스 입력하기</h6>
<p>다음과 같이 명시된 클래스 속성과 타입이 일치하는 인스턴스를 입력할 수 있다. 각각의 데이터는 적어도 하나의 공백에 의해 구분된다.</p>
<p class="label">예제 1</p>
<p class="code">%class employee (name)<br />
'jordan'&#160;<br />
'james'&#160;&#160;<br />
'garnett'<br />
'malone'</p>
<h6>인스턴스 번호 부여하기</h6>
<p>데이터 라인의 처음에 '번호:'의 형식으로 해당 인스턴스에 대한 번호를 부여할 수 있다. 인스턴스 번호는 명시된 클래스 내에서 유일한 양수이며, 번호와 콜론(:) 사이에는 공백이 허용되지 않는다. 이와 같이 인스턴스 번호를 부여하는 이유는 추후 객체 참조 관계를 설정하기 위함이다.</p>
<p class="label">예제 2</p>
<p class="code">%class employee (name)<br />
1: 'jordan'&#160;<br />
2: 'james'&#160;&#160;<br />
3: 'garnett'&#160;<br />
4: 'malone'&#160;</p>
<h6>참조 관계 설정하기</h6>
<p><span class="keyword">@</span> 다음에 참조하는 클래스를 명시하고, 수직바(|) 다음에 참조하는 인스턴스의 번호를 명시하여&#160;객체 참조 관계를 설정할 수 있다.</p>
<p class="label">구문&#160;</p>
<p class="syntax"><span class="keyword">@</span><span class="var">class_ref</span> | <span class="var">instance_no</span><br />
<span class="var">class_ref</span>:<br />
&#160;&#160;&#160;&#160; class_name<br />
&#160;&#160;&#160;&#160; class_id</p>
<p class="definition"><span class="keyword">@</span> 다음에는 클래스명 또는 클래스 id를&#160;명시하고, 수직바(|) 다음에는 인스턴스 번호를 명시한다. 수직바(|)의 양쪽에는 공백을 허용하지 않는다.</p>
<a name="ex3" id="ex3"></a>
<p class="label">예제 3</p>
<p class="definition">다음은 paycheck 클래스에 인스턴스를 입력하는 예제이며,&#160;name 속성은 employee 클래스의 인스턴스를 참조한다. 마지막 라인과 같이 앞에서 정의되지 아니한 인스턴스 번호를 이용하여 참조 관계를 설정하는 경우 해당 데이터는 <span class="keyword">NULL</span>로 입력된다.</p>
<p class="code">%class&#160;paycheck(name department salary)<br />
@employee|1&#160;&#160;&#160;'planning'&#160;&#160; 8000000&#160;&#160;&#160;<br />
@employee|2&#160;&#160;&#160;'planning'&#160;&#160;&#160;6000000&#160;&#160;<br />
@employee|3&#160;&#160;&#160;'sales'&#160;&#160;&#160;5000000&#160;&#160;<br />
@employee|4&#160;&#160;&#160;'development'&#160;&#160; 4000000<br />
@employee|5&#160;&#160;&#160;'development'&#160;&#160; 5000000</p>
<p class="label">예제 4</p>
<p class="definition"><a href="#id">클래스에 식별자 부여하기</a>에서 <span class="keyword">%id</span> 명령어로 employee 클래스에 21이라는 식별자를 부여했으므로, 예제 3을 다음과 같이 작성할 수 있다.</p>
<p class="code">%class&#160;paycheck(name department salary)<br />
@21|1&#160;&#160;&#160;'planning'&#160;&#160; 8000000&#160;&#160;&#160;<br />
@21|2&#160;&#160;&#160;'planning'&#160;&#160;&#160;6000000&#160;&#160;<br />
@21|3&#160;&#160;&#160;'sales'&#160;&#160;&#160;5000000&#160;&#160;<br />
@21|4&#160;&#160;&#160;'development'&#160;&#160; 4000000<br />
@21|5&#160;&#160;&#160;'development'&#160;&#160; 5000000</p>
<script type="text/javascript" language="javascript1.2">//<![CDATA[
<!--
if (window.writeIntopicBar)
	writeIntopicBar(0);


highlightSearch();
//-->
//]]></script>
</body>
</html>
