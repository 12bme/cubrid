
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<meta name="layout-height" content="25810" />
<meta name="layout-width" content="1072" />
<title>제약 조건</title>
<link href="../nhelp.css" rel="Stylesheet" type="text/css" />
 <meta name="generator" content="Adobe RoboHelp 8" />
<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
-->
</style>
<script type="text/javascript" language="javascript1.2" src="../whmsg.js"></script>
<script type="text/javascript" language="javascript" src="../whver.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whproxy.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whutils.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whlang.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whtopic.js"></script>

</head>
<body><script type="text/javascript" language="javascript1.2">//<![CDATA[
<!--
if (window.gbWhTopic)
{
	var strUrl = document.location.href;
	var bc = 0;
	var n = strUrl.toLowerCase().indexOf("bc-");
	if(n != -1)
	{
		document.location.href = strUrl.substring(0, n);
		bc = strUrl.substring(n+3);
	}

	if (window.addTocInfo)
	{
	addTocInfo("CUBRID SQL 설명서\n테이블 조작\n테이블 생성\n제약 조건");
         if(strUrl.toLowerCase().indexOf("/help/")==-1){

    addButton("show",BTN_TEXT,"Show","","","","",0,0,"","","");

    }


	}
	if (window.writeBtnStyle)
		writeBtnStyle();

	if (window.writeIntopicBar)
		writeIntopicBar(1);if(strUrl.toLowerCase().indexOf("/help/")==-1){

         document.write("<p style=\"text-align:left\"> ");

AddMasterBreadcrumbs("../index.htm", "", "&nbsp;&gt;&nbsp;", "홈", "../cubrid.htm");

document.write("<a href=\"syntax.htm\">CUBRID SQL 설명서<\/a> &nbsp;&gt;&nbsp; <a href=\"syntax_table_create_syntax.htm\">테이블 조작<\/a> &nbsp;&gt;&nbsp; <a href=\"syntax_table_create_syntax.htm\">테이블 생성<\/a> &nbsp;&gt;&nbsp; 제약 조건<\/p>");}


	if (window.setRelStartPage)
	{
	setRelStartPage("../index.htm");

		autoSync(1);
		sendSyncInfo();
		sendAveInfoOut();
	}
}
else
	if (window.gbIE4)
		document.location.reload();

//-->
//]]></script>
<h4>제약 조건</h4>
<ul>
<li><a href="#notnull">NOT NULL 제약</a></li>
<li><a href="#UNIQUE">UNIQUE 제약</a></li>
<li><a href="#PRIMARY">PRIMARY KEY 제약</a></li>
<li><a href="#FOREIGN">FOREIGN KEY 제약</a></li>
</ul>
<h5><a name="notnull" id="notnull"></a>NOT NULL 제약</h5>
<h6>설명</h6>
<p><span class="keyword">NOT&#160;NULL</span> 제약 조건은 정의된 컬럼이 반드시&#160;<span class="keyword">NULL</span>을 제외한 어떤 값을 갖도록 하는 제약 조건이다. 모든 컬럼은 데이터에 대해 <span class="keyword">NOT NULL</span> 제약 조건을 가질 수 있다. 만약 <span class="keyword">INSERT</span>, <span class="keyword">UPDATE</span> 구문을 통해 값을 <span class="keyword">NULL</span> 값으로 입력하거나 변경할 경우 에러가 발생한다.</p>
<h6>예제</h6>
<p>다음은 manager2 테이블의 name&#160;컬럼을 <span class="keyword">NOT NULL</span>로 지정하는 예제이다.</p>
<p class="code">CREATE&#160;TABLE&#160;manager2<br />
(name VARCHAR(40) NOT NULL,<br />
event VARCHAR(50));</p>
<h5><a name="UNIQUE" id="UNIQUE">UNIQUE 제약</a></h5>
<h6>설명</h6>
<p><span class="keyword">UNIQUE</span> 제약 조건은 정의된 컬럼이 고유한 값을 갖도록 하는 제약 조건이다.&#160;<span class="keyword">UNIQUE</span> 제약 조건은 단일 컬럼뿐만 아니라 하나 이상의 다중 컬럼에 대해서도 정의가 가능하다.</p>
<h6>예제</h6>
<p><span class="keyword">UNIQUE</span> 제약 조건이 다중 컬럼에 대해 정의되면&#160;컬럼 전체 값의 조합에 대해 고유성이 보장된다. 아래의 예와 같이 두 번째 입력 구문은 a 컬럼의 값은 같지만 b 컬럼의 값이 고유하므로 성공한다. 세 번째 입력 구문은 a, b 전체에 대해 첫 번째 값과 동일하므로 오류가 발생한다.</p>
<p class="code">CREATE TABLE "test"(<br />
a INTEGER,<br />
b INTEGER,<br />
UNIQUE(a,b))<br />
INSERT INTO "test" VALUES(1, 2);<br />
INSERT INTO "test" VALUES(1, 3);<br />
-- b 값이 다르므로 성공<br />
INSERT INTO "test" VALUES(1, 2);<br />
-- a, b 값이 첫 번째 입력 값과 동일하므로 오류</p>
<h5>PRIMARY<a name="PRIMARY" id="PRIMARY"></a> KEY 제약</h5>
<h6>설명</h6>
<p>테이블에서 키(key)란 각 인스턴스를 고유하게 식별할 수 있는 하나 이상의 컬럼들의 집합을&#160;말한다. 후보키(candidate key)는&#160;테이블 내의 각&#160;인스턴스를 고유하게 식별하는 컬럼들의 집합을 의미하며, 사용자는 이러한 후보 키 중 하나를 기본키(primary key)로 정의할 수 있다. 즉, 기본키로 정의된 컬럼 값은 각 인스턴스에서 고유하게 식별된다.</p>
<h6>예제</h6>
<ul>
<li class="title">예제 1</li>
<li class="desc">데모로 제공된 olympic DB의 nation 테이블의 스키마를 예로 보자. code 컬럼을 단일 기본키로 지정하였다.</li>
</ul>
<p class="code">CREATE TABLE nation (<br />
&#160;&#160; code&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; CHAR(3)&#160;&#160;&#160;&#160; NOT NULL PRIMARY KEY,<br />
&#160;&#160; name&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; VARCHAR(40) NOT NULL,<br />
&#160;&#160; continent&#160;&#160;&#160;&#160;&#160;&#160;&#160; VARCHAR(10) ,<br />
&#160;&#160; capital&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; VARCHAR(30)<br />
);</p>
<ul>
<li class="title">예제 2</li>
<li class="desc">record 테이블의 경우 4개의 컬럼을 복합키로 지정한 예이다.</li>
</ul>
<p class="code">CREATE TABLE record (<br />
host_year&#160;&#160;&#160; INT NOT NULL,<br />
event_code&#160;&#160; INT NOT NULL,<br />
athlete_code INT NOT NULL,<br />
medal&#160;&#160;&#160;&#160;&#160;&#160;&#160; CHAR(1)&#160; NOT NULL,<br />
score&#160;&#160;&#160;&#160;&#160;&#160;&#160; VARCHAR(20),<br />
unit&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; VARCHAR(5),<br />
PRIMARY KEY(host_year, event_code, athlete_code, medal)<br />
);</p>
<h5><a name="FOREIGN" id="FOREIGN"></a>FOREIGN KEY 제약</h5>
<h6>설명</h6>
<p>외래키(foreign key)란 참조 관계에 있는 다른 테이블의 기본키를 참조하는 컬럼 또는 컬럼들의 집합을 말한다. 외래키와 참조되는 기본키는 동일한 데이터 타입을 가져야&#160;한다. 외래키가 기본키를 참조함에 따라 연관되는 두&#160;테이블 사이에는 일관성이 유지되는데, 이를 참조 무결성 (referential integrity)이라 한다.</p>
<h6>구문</h6>
<p class="syntax"><span class="keyword">CREATE</span> {&#160;<span class="keyword">TABLE</span> | <span class="keyword">CLASS</span>&#160;} <span class="var">table_name</span><br />
[ {<span class="keyword">UNDER</span> | <span class="keyword">AS SUBCLASS OF</span> } <span class="var">super_class_name</span> [ {, <span class="var">super_class_name</span> }_ ] ] ...<br />
[( <span class="var">column_definition</span> [ { , <span class="var">column_definition</span> }...; ]<br />
| <span class="var">unique_constraint</span><br />
| <span class="var">referential_constraint</span><br />
)]<br />
<br />
<span class="var">referential_constraint</span>:<br />
[<span class="keyword">FOREIGN KEY</span> [<span class="var">constraint-name</span>] (<span class="var">attribute_name</span>[{, <span class="var">attribute_name</span> }...; ])<br />
<span class="keyword">REFERENCES</span> <span class="var">referenced_class_name</span> (<span class="var">attribute_name</span> [{ , <span class="var">attribute_name</span> }...; ])<br />
[<span class="var">referential_triggered_action</span>] ]<br />
<br />
<span class="var">referential_triggered_action</span>:<br />
<span class="var">update_rule</span> [ <span class="var">delete_rule</span> [ <span class="var">cache_object_rule</span> ] ]<br />
<br />
<span class="var">update_rule</span>:<br />
<span class="keyword">ON UPDATE</span> <span class="var">referential_action</span><br />
<br />
<span class="var">delete_rule</span>:<br />
<span class="keyword">ON DELETE</span> <span class="var">referential_action</span><br />
<br />
<span class="var">cache_object_rule</span>:<br />
<span class="keyword">ON CACHE OBJECT</span> <span class="var">cache_object_column_name</span><br />
<br />
<span class="var">referential_action</span>:<br />
<span class="keyword">CASCADE</span><br />
| <span class="keyword">RESTRICT</span><br />
| <span class="keyword">NO ACTION</span></p>
<ul>
<li><span class="var">table_name</span> : 생성할 테이블 이름을 지정한다.</li>
<li><span class="var">referential_constraint</span> :
<ul>
<li><span class="var">constraint-name</span> : 제약 조건의 이름을 지정한다. 생략할 경우 CUBRID가 자동으로 지정한다.</li>
<li><span class="var">attribute_name</span> : 참조하는 외래키의 이름을 지정한다. 정의되는 외래키의 개수(식별된 속성의 개수)는 제한이 없으나 기본키의 개수와 동일한 개수만큼 정의되어야 한다.</li>
<li><span class="var">referenced_table_name</span> : 참조되는 테이블의 이름을 지정한다.</li>
<li><span class="var">attribute_name</span> : 참조되는 기본키의 이름을 지정한다.</li>
</ul>
</li>
<li><span class="var">referential_triggered_action</span> : 참조 무결성이 유지되도록 특정 연산에 따라 대응하는 트리거 동작을 정의하는 것이며, <span class="keyword">ON UPDATE</span>, <span class="keyword">ON DELETE</span>, <span class="keyword">ON CACHE OBJECT</span>가 올 수 있다. 각각의 동작은 중복하여 정의 가능하며, 정의 순서는 무관하다.</li>
<li><span class="keyword">ON UPDATE</span> : 외래키가 참조하는 기본키 값을 갱신하려 할 때 수행할 작업을 정의한다. 사용자는 <span class="keyword">NO ACTION</span>, <span class="keyword">RESTRICT</span> 중 하나의 옵션을 지정할 수 있으며, 기본은 <span class="keyword">RESTRICT</span>이다.
<ul>
<li><span class="keyword">RESTRICT</span> : 기본키 값을 수정할 수 없도록 한다.</li>
<li><span class="keyword">NO ACTION</span> : 기본키 값을 수정하여도 외래키에는 영향을 미치지 않는다.</li>
</ul>
</li>
<li><span class="keyword">ON DELETE</span> : 외래키가 참조하는 기본키 값을 삭제하려 할 때 수행할 작업을 정의한다. 사용자는 <span class="keyword">NO ACTION</span>, <span class="keyword">RESTRICT</span>, <span class="keyword">CASCADE</span> 중 하나의 옵션을 지정할 수 있으며, 기본은 <span class="keyword">RESTRICT</span>이다.
<ul>
<li><span class="keyword">CASCADE</span> : 기본키 값이 삭제됨에 따라 해당 키를 참조하는 외래키가 포함된 모든 인스턴스가 삭제되도록 지정한다.</li>
<li><span class="keyword">RESTRICT</span> :기본키 값을 삭제할 수 없도록 한다.</li>
<li><span class="keyword">NO ACTION</span> : 기본키 값이 삭제되어도 참조하는 외래키에는 영향을 미치지 않는다.</li>
</ul>
</li>
<li><span class="keyword">ON CACHE OBJECT</span> : 객체 지향 모델링에서는 직접 객체 참조(object reference)를 이용한 객체 탐색이 가능한데, 이것을 참조 무결성 외래키와 연계하여 지원하는 것이 <span class="keyword">ON CACHE OBJECT</span> 옵션이다.
<ul>
<li><span class="keyword">ON CACHE OBJECT</span> 옵션은 외래키 설정에 OID 참조 관계를 부가하고, 설정된 OID는 기본키 테이블에 대한 외래키의 캐시(CACHE) 포인트 개념으로 사용된다. 이렇게 설정된 OID는 시스템 내부적으로만 관리되고, 사용자에 의해 변경될 수 없다.</li>
<li><span class="keyword">ON CACHE OBJECT</span>를 정의하기 위해서는 기본키를 가진 테이블을 도메인으로하는 컬럼이 이미 정의되어 있어야 하며, <span class="var">cache_object_column_name</span>에 명시되어야 한다.</li>
<li><span class="keyword">ON CACHE OBJECT</span>로 정의된 속성은 기존 객체 타입의 OID와 동일하게 OID를 사용할 수 있으며, 복제 시 OID 참조 관계를 유지시켜 줄 수 있다.</li>
</ul>
</li>
</ul>
<h6>예제</h6>
<p>다음은 데모로 제공된 올림픽 데이터베이스에서 외래키 참조 관계를 보여주는 예제이다.</p>
<p>테이블 생성시 nation 테이블과 olympic 테이블의 기본키를&#160;participant 테이블에서 외래키로 참조하도록 지정한다.</p>
<p class="code">CREATE TABLE nation (<br />
&#160;&#160; code&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; CHAR(3)&#160;&#160;&#160;&#160; NOT NULL PRIMARY KEY,<br />
&#160;&#160;....<br />
);<br />
<br />
CREATE TABLE olympic (<br />
&#160;&#160; host_year&#160;&#160;&#160;&#160;&#160;&#160;&#160; INT&#160;&#160;&#160; NOT NULL PRIMARY KEY,<br />
&#160;&#160;&#160;....<br />
);<br />
<br />
CREATE TABLE participant (<br />
&#160;&#160; host_year&#160;&#160;&#160;&#160;&#160;&#160;&#160; INT&#160;&#160;&#160; NOT NULL ,<br />
&#160;&#160; nation_code&#160;&#160;&#160;&#160;&#160; CHAR(3)&#160;&#160;&#160;&#160; NOT NULL ,<br />
&#160;&#160; ....<br />
&#160;&#160; PRIMARY KEY(host_year, nation_code)&#160;&#160; ,<br />
&#160;&#160; FOREIGN KEY(host_year) REFERENCES olympic(host_year),<br />
&#160;&#160; FOREIGN KEY(nation_code) REFERENCES nation(code)<br />
);</p>
<h6>주의 사항&#160;</h6>
<ul>
<li>참조 제한 조건에는 참조 대상이 되는 기본키 테이블의 이름 및 기본키와 일치하는 컬럼명들이 정의된다. 만약, 컬럼명 목록을 지정하지 않을 경우에는 기본키 테이블의 기본키가 원래 지정된 순서대로 지정된다.</li>
<li>참조 제한 조건의 기본키의 개수는 외래키의 개수와 동일하여야 한다.참조 제한 조건의 기본키는 동일한 컬럼명이 중복될 수 없다.</li>
</ul>
<script type="text/javascript" language="javascript1.2">//<![CDATA[
<!--
if (window.writeIntopicBar)
	writeIntopicBar(0);


highlightSearch();
//-->
//]]></script>
</body>
</html>
