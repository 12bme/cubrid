
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>수퍼클래스 충돌</title>
<link href="../nhelp.css" rel="Stylesheet" type="text/css" />
 <meta name="generator" content="Adobe RoboHelp 8" />
<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
-->
</style>
<script type="text/javascript" language="javascript1.2" src="../whmsg.js"></script>
<script type="text/javascript" language="javascript" src="../whver.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whproxy.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whutils.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whlang.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whtopic.js"></script>

</head>
<body><script type="text/javascript" language="javascript1.2">//<![CDATA[
<!--
if (window.gbWhTopic)
{
	var strUrl = document.location.href;
	var bc = 0;
	var n = strUrl.toLowerCase().indexOf("bc-");
	if(n != -1)
	{
		document.location.href = strUrl.substring(0, n);
		bc = strUrl.substring(n+3);
	}

	if (window.addTocInfo)
	{
	addTocInfo("CUBRID SQL 설명서\n테이블 조작\n클래스 충돌 해결\n수퍼클래스 충돌");
         if(strUrl.toLowerCase().indexOf("/help/")==-1){

    addButton("show",BTN_TEXT,"Show","","","","",0,0,"","","");

    }


	}
	if (window.writeBtnStyle)
		writeBtnStyle();

	if (window.writeIntopicBar)
		writeIntopicBar(1);if(strUrl.toLowerCase().indexOf("/help/")==-1){

         document.write("<p style=\"text-align:left\"> ");

AddMasterBreadcrumbs("../index.htm", "", "&nbsp;&gt;&nbsp;", "홈", "../cubrid.htm");

document.write("<a href=\"syntax.htm\">CUBRID SQL 설명서<\/a> &nbsp;&gt;&nbsp; <a href=\"syntax_table_create_syntax.htm\">테이블 조작<\/a> &nbsp;&gt;&nbsp; <a href=\"syntax_table_conflict_intro.htm\">클래스 충돌 해결<\/a> &nbsp;&gt;&nbsp; 수퍼클래스 충돌<\/p>");}


	if (window.setRelStartPage)
	{
	setRelStartPage("../index.htm");

		autoSync(1);
		sendSyncInfo();
		sendAveInfoOut();
	}
}
else
	if (window.gbIE4)
		document.location.reload();

//-->
//]]></script>
<h4>수퍼클래스 충돌</h4>
<h6>수퍼클래스 추가</h6>
<p><span class="keyword">ALTER CLASS</span> 구문에서 <span class="keyword">INHERIT</span> 절은 선택 사항이지만 클래스의 변경에 의해 충돌이 발생할 경우에는 반드시 사용해야 하는 문장이다. <span class="keyword">INHERIT</span> 절 다음에 하나 이상의 해결방법을 명시할 수 있다.</p>
<p><span class="var">superclass_name</span>에는 충돌이 발생했을 때 새로 상속받을 속성이나 메소드를 가지는 수퍼클래스의 이름을 명시하고, <span class="var">attr_mthd_name</span>에는 상속받을 속성이나 메소드의 이름을 명시한다. 상속받을 속성이나 메소드의 이름을 변경할 필요가 있는 경우에는 <span class="keyword">alias</span> 절을 사용할 수 있다.</p>
<p>다음 예는 demodb에 있는 olympic db 중 event 클래스와 stadium 클래스를 상속받아서 soccer_stadium 클래스를 만든다. event 클래스와 stadium 클래스는 모두 name, code 속성을 가지고 있기 때문에 <span class="keyword">INHERIT</span>을 사용하여 상속받을 속성을 지정해야 한다.</p>
<p class="code">CREATE CLASS soccer_stadium UNDER event, stadium<br />
INHERIT name OF stadium, code OF stadium;</p>
<p>두 수퍼클래스 event, stadium가 name이라는 속성을 가지고 있고, soccer_stadium 클래스가 두 속성을 모두 상속받으려면, stadium의 name은 그대로 상속 받고 event 클래스의 name은 <span class="keyword">INHERIT</span>의 <span class="keyword">alias</span> 절을 사용하여 이름을 변경하여 상속 받을 수 있다.</p>
<p>아래 예는 stadium 클래스의 name은 그대로 name으로 상속받고, event 클래스의 name은 purpose이라는 별명으로 상속받는다.</p>
<p class="code">ALTER CLASS soccer_stadium<br />
INHERIT name OF event AS purpose;</p>
<h6>수퍼클래스 삭제</h6>
<p><span class="keyword">INHERIT</span>을 사용하여 명시적으로 속성이나 메소드를 상속한 수퍼클래스를 삭제하면 서브클래스에서 다시 이름 충돌이 발생할 수 있다. 이 경우에는 삭제할 때 명시적으로 상속받을 속성이나 메소드를 지정해야 한다.</p>
<p>다음 예는 demodb의 game, participant, stadium 클래스를 상속받아서 seoul_1988_soccer 클래스를 만들고, 그 중 participant 클래스를 수퍼클래스에서 제거한다. participant 클래스에서 nation_code와 host_year를 명시적으로 상속받았기 때문에, 수퍼클래스에서 제거하기 전에 nation_code와 host_year의 이름 충돌을 해결해야 한다. 하지만, host_year는 game 클래스에만 존재하므로 명시적으로 지정할 필요는 없다.</p>
<p class="code">CREATE CLASS seoul_1988_soccer UNDER game, participant, stadium<br />
INHERIT nation_code OF participant, host_year OF participant;<br />
ALTER CLASS seoul_1988_soccer<br />
DROP SUPERCLASS participant<br />
INHERIT nation_code OF stadium;</p>
<h6>호환되는 도메인</h6>
<p>두 개 이상의 수퍼클래스 사이에서 속성의 충돌이 발생할 때, 모든 속성이 호환되는 도메인을 가지는 경우에만 충돌을 해결하는 구문이 불가능하다.</p>
<p>예들 들어, 정수 타입의 phone이라는 속성을 가지는 수퍼클래스를 상속받은 클래스에는 스트링 타입의 phone 속성을 가지는 또 다른 수퍼클래스를 추가할 수 없다. 두 수퍼클래스의 phone 속성의 타입이 모두 스트링이거나 정수라면 <span class="keyword">INHERIT</span> 구문을 이용하여 충돌을 해결하면서 수퍼클래스를 추가할 수 있다.</p>
<p>이름은 같지만 도메인이 다른 속성을 상속할 때 도메인 호환성이 점검된다. 이 경우, 클래스 상속 계층 구조의 하위 클래스를 도메인으로 갖는 속성이 자동으로 상속된다. 상속받을 속성들의 도메인이 호환 가능할 때, 상속 관계가 만들어지는 클래스에서 충돌이 해결되어야 한다.</p>
<script type="text/javascript" language="javascript1.2">//<![CDATA[
<!--
if (window.writeIntopicBar)
	writeIntopicBar(0);


highlightSearch();
//-->
//]]></script>
</body>
</html>
