<?xml version="1.0" encoding="UTF-8"?>
<ck><di ky="407" rd="syntax/syntax_catalog_vclass_dbtrig.htm|DB_TRIG" ct=" DB_TRIG  데이터베이스 내에서 현재 사용자가 접근 권한을 가진 클래스나 그 소속 속성을 대상(target)으로 하는 트리거 정보를 보여준다.      ..."/><di ky="408" rd="syntax/syntax_catalog_vclass_dbvclass.htm|DB_VCLASS" ct=" DB_VCLASS  데이터베이스 내에서 현재 사용자가 접근 권한을 가진 가상 클래스들에 대해 그 SQL 정의문을 보여준다.      속성명    ..."/><di ky="409" rd="syntax/syntax_catalog_vclass_vclass.htm|시스템 카탈로그 가상 클래스" ct=" 시스템 카탈로그 가상 클래스  일반 사용자는 자신이 권한을 가진 클래스에 대해서만 그 클래스와 관련된 정보들을 시스템 카탈로그 가상 클래스들을 통해 볼 수 있다.  이 ..."/><di ky="410" rd="syntax/syntax_datatype_bit_bit.htm|BIT(n)" ct=" BIT(n)  설명  고정길이 이진수 혹은 16진수 비트 스트링은  BIT ( n )로 나타내는데, 여기서  n 은 최대 비트의 개수를 나타낸다. 만약,  n 이 생략 ..."/><di ky="411" rd="syntax/syntax_datatype_bit_bitvarying.htm|BIT VARYING(n)" ct=" BIT VARYING(n)  설명  가변길이 비트 스트링은  BIT VARYING ( n )으로 나타낸다. 여기서  n 은 최대 비트의 개수를 나타낸다. 만약,  n ..."/><di ky="412" rd="syntax/syntax_datatype_bit_def.htm|정의와 특성" ct=" 정의와 특성  정의  비트 스트링은 0과 1로 이루어진 이진 값의 순열(sequence)이다. 컴퓨터 화면에 보여지는 이미지(비트맵)는 비트 스트링으로 저장할 수 있다 ..."/><di ky="413" rd="syntax/syntax_datatype_collection_def.htm|정의와 특성" ct=" 정의와 특성  정의  여러 개의 데이터 값을 하나의 속성에 저장할 수 있도록 하는 것은 관계형 데이터베이스의 확장 기능이다. 컬렉션의 각 요소는 서로 다른 데이터 타입 ..."/><di ky="414" rd="syntax/syntax_datatype_collection_list.htm|LIST 또는 SEQUENCE" ct=" LIST 또는 SEQUENCE  설명  LIST (= SEQUENCE )는 요소의 입력된 순서가 유지되는 컬렉션 타입으로 중복이 허용된다.  LIST 의 요소는 여러  ..."/><di ky="415" rd="syntax/syntax_datatype_collection_multiset.htm|MULTISET" ct=" MULTISET  설명  MULTISET 는 중복이 허용되는 집합이다.  MULTISET 의 요소는 여러 종류의 데이터 타입을 가질 수 있고, 다른 클래스의 인스턴스를 ..."/><di ky="416" rd="syntax/syntax_datatype_collection_set.htm|SET" ct=" SET  설명  SET 는 각 요소가 서로 다른 값을 갖는 집합이다.  SET 의 요소는 여러 종류의 데이터 타입을 가질 수 있고, 다른 클래스의 인스턴스를 가질 수도 ..."/><di ky="417" rd="syntax/syntax_datatype_date_date.htm|DATE" ct=" DATE  설명  DATE  데이터 타입은 날짜, 월, 연도 등 세 부분으로 이루어진 값이다.  DATE  리터럴은 문자 스트링으로 표현하는데, 키워드  DATE  뒤 ..."/><di ky="418" rd="syntax/syntax_datatype_date_datetime.htm|DATETIME" ct=" DATETIME  설명  DATETIME  타입은 연도, 월, 날짜, 시, 분, 초, 밀리초 로 이루어진 값이다.  DATETIME  리터럴은 문자 스트링으로 표현하는 ..."/><di ky="419" rd="syntax/syntax_datatype_date_def.htm|정의와 특성" ct=" 정의와 특성  정의  날짜-시간 데이터 타입은 날짜, 시간 혹은 이 두 가지를 모두 표현할 때 사용하는 데이터 타입으로, CUBRID는 다음과 같은 데이터 타입을 지원 ..."/><di ky="420" rd="syntax/syntax_datatype_date_time.htm|TIME" ct=" TIME  설명  TIME  데이터 타입은 시각, 분, 초 등 세 부분으로 이루어진 값이다.  TIME  리터럴은 문자 스트링으로 표현하는데, 키워드  TIME  뒤에 ..."/><di ky="421" rd="syntax/syntax_datatype_date_timestamp.htm|TIMESTAMP" ct=" TIMESTAMP  설명  TIMESTAMP  데이터 타입은 날짜와 시간을 결합한 데이터 값을 표현한다.  TIMESTAMP  구문은 아래와 같이  TIMESTAMP ..."/><di ky="422" rd="syntax/syntax_datatype_num_bigint.htm|BIGINT" ct=" BIGINT  설명  BIGINT  데이터 타입은 정확한 수치형 타입이다. 정밀도는 19이고 스케일은 0이다.  BIGINT  타입은 8바이트(64비트) 정수를 저장하 ..."/><di ky="423" rd="syntax/syntax_datatype_num_decimal.htm|NUMERIC 또는 DECIMAL" ct=" NUMERIC 또는 DECIMAL  설명  NUMERIC  또는  DECIMAL  데이터 타입은 정확한 수치를 나타낸다. 다음과 같이 정밀도와 스케일을 옵션으로 지정하 ..."/><di ky="424" rd="syntax/syntax_datatype_num_def.htm|정의와 특성" ct=" 정의와 특성  정의  수치형 데이터 타입은 정확한(exact) 형태와 근사치(approximate) 형태로 나누어 진다. 정확한 수치형 데이터 타입은 정확하고 일관된  ..."/><di ky="425" rd="syntax/syntax_datatype_num_double.htm|DOUBLE 또는 DOUBLE PRECISION" ct=" DOUBLE 또는 DOUBLE PRECISION  설명  DOUBLE PRECISION  데이터 타입은 근사치 수치형 타입이다.  DOUBLE PRECISION  데이 ..."/><di ky="426" rd="syntax/syntax_datatype_num_float.htm|FLOAT 또는 REAL" ct=" FLOAT 또는 REAL  설명  FLOAT (또는  REAL ) 데이터 타입은 근사치 수치형 타입이다. 정밀도를 옵션으로 지정할 수 있다.  정밀도  p 가 7  ..."/><di ky="427" rd="syntax/syntax_datatype_num_integer.htm|INTEGER" ct=" INTEGER  설명  INTEGER  데이터 타입은 정확한 수치형 타입이다. 정밀도는 10이고 스케일은 0이다.  INTEGER  값은 사용하고 있는 컴퓨터 하드 ..."/><di ky="428" rd="syntax/syntax_datatype_num_monetary.htm|MONETARY" ct=" MONETARY  설명  MONETARY  데이터 타입은 근사치 수치형 타입이다. 실제통화(currency) 종류는 시스템에 정의된 로캘에 의해 정해진다. 정밀도와 스 ..."/><di ky="429" rd="syntax/syntax_datatype_num_smallint.htm|SMALLINT" ct=" SMALLINT  설명  SMALLINT  데이터 타입은 정확한 수치형 타입이다.  SMALLINT  데이터 타입은 정밀도가 5이고 스케일은 0이다.  SMALLINT ..."/><di ky="430" rd="syntax/syntax_datatype_string_char.htm|CHAR(n)" ct=" CHAR(n)  설명  고정길이 문자 스트링은  CHAR ( n )로 나타낸다. 여기서  n 은 ASCII 문자 스트링의 개수를 나타내는 것으로 한 문자는 1바이트를  ..."/><di ky="431" rd="syntax/syntax_datatype_string_def.htm|정의와 특성" ct=" 정의와 특성  정의  CUBRID는 네 가지 종류의 문자 스트링(character string)을 지원한다.   고정길이 문자 스트링 :  CHAR ( n ) ..."/><di ky="432" rd="syntax/syntax_datatype_string_nchar.htm|NCHAR(n)" ct=" NCHAR(n)  설명  고정길이 국가 문자 스트링은  NCHAR ( n )로 나타내는데, 여기서  n 은 문자의 개수를 나타낸다. 이 데이터 타입에 저장될 수 있는  ..."/><di ky="433" rd="syntax/syntax_datatype_string_ncharvarying.htm|NCHAR VARYING(n)" ct=" NCHAR VARYING(n)  설명  가변길이의 국가 문자 스트링은  NCHAR VARYING ( n )으로 나타낸다. 여기서  n 은 문자의 개수를 나타낸다.  N ..."/><di ky="434" rd="syntax/syntax_datatype_string_string.htm|STRING" ct=" STRING  설명  STRING 은 가변길이 문자 스트링 데이터 타입이다.  STRING 은  VARCHAR 를 최대 길이로 지정한 것과 같다. 즉  STRING 은 ..."/><di ky="435" rd="syntax/syntax_datatype_string_varchar.htm|VARCHAR(n) 또는 CHAR VARYING(n)" ct=" VARCHAR(n) 또는 CHAR VARYING(n)  설명  가변길이 문자 스트링은  VARCHAR ( n )로 나타낸다. 여기서  n 은 ASCII 문자 스트링의  ..."/><di ky="436" rd="syntax/syntax_index_create.htm|인덱스 생성" ct=" 인덱스 생성  설명  CREATE INDEX  구문을 이용하여 지정한 테이블에 인덱스를 생성한다.  구문   CREATE  [  REVERSE  ] [  UNI ..."/><di ky="437" rd="syntax/syntax_index_delete.htm|인덱스 삭제" ct=" 인덱스 삭제  설명  DROP INDEX  문을 사용하여 인덱스를 삭제할 수 있다. 삭제할 인덱스를 지정하는 방법에는 다음과 같은 두 가지 방법이 있다.   인 ..."/><di ky="438" rd="syntax/syntax_index_mod.htm|인덱스 변경" ct=" 인덱스 변경  설명  ALTER INDEX  문을 사용하여 인덱스를 재생성 한다. (즉, 인덱스를 삭제하고 다시 생성한다.) 재생성 할 인덱스를 지정하는 방법에는 두  ..."/><di ky="439" rd="syntax/syntax_instance_create_query.htm|질의를 이용한 INSERT" ct=" 질의를 이용한 INSERT  설명  INSERT  문에 질의를 사용하면 하나의  INSERT  문으로 다수의 데이터를 생성할 수 있다.  다른 테이블로부터 특정 검 ..."/><di ky="440" rd="syntax/syntax_instance_create_sub.htm|부질의를 이용한 INSERT" ct=" 부질의를 이용한 INSERT  설명  INSERT  문의  VALUES  항목의 하나로 질의를 포함하여 데이터를 삽입할 수 있다.  구문  INSERT INTO ..."/><di ky="441" rd="syntax/syntax_instance_create_syntax.htm|INSERT INTO (구문)" ct=" 데이터 삽입(INSERT INTO)  설명  INSERT INTO  구문을 사용하면 테이블에 데이터를 삽입할 수 있다.  구문  INSERT INTO   tab ..."/><di ky="442" rd="syntax/syntax_instance_delete.htm|데이터 삭제(DELETE)" ct=" 데이터 삭제(DELETE)  설명  DELETE  구문을 사용하면 테이블 내에 불필요한 데이터를 삭제할 수 있다.  구문  DELETE  FROM  tabl ..."/><di ky="443" rd="syntax/syntax_instance_update.htm|데이터 갱신(UPDATE)" ct=" 데이터 갱신(UPDATE)  설명  UPDATE  문을 사용하면 기존에 삽입된 데이터를 갱신할 수 있다.  구문  UPDATE   table_name  SE ..."/><di ky="444" rd="syntax/syntax_javasp_call_app.htm|Java 응용 프로그램에서 호출" ct=" Java 응용 프로그램에서 호출  Java 응용 프로그램에서 Java 저장 함수/프로시저를 호출하기 위해서는  CallableStatement 를 사용한다.  CUBR ..."/><di ky="445" rd="syntax/syntax_javasp_call_basic.htm|CALL 사용" ct=" CALL 사용  등록된 Java 저장 함수/프로시저는  CALL  문을 사용하거나, SQL 문에서 호출하거나, Java 응용프로그램에서 호출될 수 있다.  다음과 같이 ..."/></ck>