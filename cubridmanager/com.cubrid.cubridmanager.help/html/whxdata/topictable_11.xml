<?xml version="1.0" encoding="UTF-8"?>
<ck><di ky="446" rd="syntax/syntax_javasp_call_sql.htm|SQL 문에서 호출" ct=" SQL 문에서 호출  다음과 같이 SQL 문에서 Java 저장 함수를 호출하여 사용할 수 있다.  select Hello() from db_root; select  ..."/><di ky="447" rd="syntax/syntax_javasp_loadjava.htm|loadjava 유틸리티" ct=" loadjava 유틸리티  설명  컴파일된 Java 파일이나 JAR(Java Archive) 파일을 CUBRID로 로딩하기 위해서  loadjava  유틸리티를 사용한 ..."/><di ky="448" rd="syntax/syntax_javasp_note.htm|주의 사항" ct=" 주의 사항  Java 저장 함수/프로시저의 리턴 값 및 IN/OUT에 대한 타입 자릿수  Java 저장 함수/프로시저의 리턴 값과 IN/OUT의 데이터 타입에 자릿수를 ..."/><di ky="449" rd="syntax/syntax_javasp_other.htm|다른 데이터베이스 연결" ct=" 다른 데이터베이스 연결  서버 측 JDBC 드라이버를 사용하더라도 현재 연결된 데이터베이스를 사용하지 않고, 외부의 다른 데이터베이스에 연결할 수도 있다. 외부의 데이터베 ..."/><di ky="450" rd="syntax/syntax_javasp_overview.htm|개요" ct=" 개요  저장 함수와 저장 프로시저를 사용하면 SQL로 구현하지 못하는 복잡한 프로그램의 로직을 구현할 수 있으며,  사용자가 보다 쉽게 데이터를 조작하게 할 수 있다. 함 ..."/><di ky="451" rd="syntax/syntax_javasp_publish_callspec.htm|Call Specifications" ct=" Call Specifications  CUBRID에서는 Java 저장 함수/프로시저를 사용하기 위해서는 Call Specifications를 작성해야 한다. Call Sp ..."/><di ky="452" rd="syntax/syntax_javasp_publish_overview.htm|개요" ct=" 개요  CUBRID는 클라이언트나 SQL 문이나 Java 응용 프로그램에서 Java 메소드를 호출할 수 있도록 Java 클래스를 등록(publish)하는 과정이 필요하다. ..."/><di ky="453" rd="syntax/syntax_javasp_serverside.htm|서버 내부 JDBC 드라이버 사용" ct=" 서버 내부 JDBC 드라이버 사용  Java 저장 함수/프로시저에서 데이터베이스에 접근하기 위해서는 서버 측 JDBC 드라이버(Server-Side JDBC Driver) ..."/><di ky="454" rd="syntax/syntax_javasp_settings.htm|Java 저장 함수/프로시저 사용을 위한 환경 설정" ct=" Java 저장 함수/프로시저 사용을 위한 환경 설정  CUBRID에서 Java 저장 함수/프로시저를 사용하기 위해서는 CUBRID 서버가 설치되는 환경에 Java가 설치되 ..."/><di ky="455" rd="syntax/syntax_javasp_step.htm|Java 저장 함수/프로시저 작성 단계" ct=" Java 저장 함수/프로시저 작성 단계  Java 저장 함수/프로시저를 작성하는 순서는 다음과 같다.   cubrid.conf  확인  Java 소스 작성 및  ..."/><di ky="456" rd="syntax/syntax_method_call_call.htm|CALL 문" ct=" CALL 문  설명  CUBRID  CALL  문은 데이터베이스에 정의된 메소드를 호출하기 위해 사용된다. 클래스 메소드, 인스턴스 메소드 모두  CALL  문으로 호 ..."/><di ky="457" rd="syntax/syntax_method_call_evaluate.htm|EVALUATE 문" ct=" EVALUATE 문  설명  EVALUATE  문 또한 데이터베이스에 정의된 메소드를 호출하는데 사용된다.  EVALUATE  문에서 메소드 호출은 표현식의 용어( ..."/><di ky="458" rd="syntax/syntax_method_call_intro.htm|개요" ct=" 개요  메소드는  CALL  또는  EVALUATE  문의 사용에 의해서 수행되며, 메소드의 결과는 질의의 결과가 반환되는 것과 같은 방법으로 반환된다.  이러한 구문 ..."/><di ky="459" rd="syntax/syntax_method_intro.htm|개요" ct=" 개요  이 장에서는 큐브리드 데이터베이스 시스템의 기능을 확장하거나 사용자에게 맞게 조정하는 소프트웨어 루틴인 메소드에 대해 기술한다.  메소드는 C로 작성된 프로그램 ..."/><di ky="460" rd="syntax/syntax_method_type.htm|메소드의 타입" ct=" 메소드의 타입  CSQL 언어는 클래스 메소드와 인스턴스 메소드 두 가지 타입의 메소드를 지원한다.   클래스 메소드 는 클래스 객체에서 호출되는 메소드이다. 일반 ..."/><di ky="461" rd="syntax/syntax_mm_glo_attr.htm|클래스에 정의된 속성" ct=" 클래스에 정의된 속성  glo  클래스에 있는 모든 속성은 CUBRID에 의해 미리 정의되어 있다. 각 속성과 관련된 값은 하나 또는 그 이상의  glo  메소드를 호출할 ..."/><di ky="462" rd="syntax/syntax_mm_glo_concurrency.htm|동시성" ct=" 동시성  동시성 규칙은 다른 CUBRID 클래스 인스턴스에 적용되는 것과 같이  glo  인스턴스에도 동일하게 적용된다.  glo  인스턴스에서 읽기 잠금을 공유함으로써  ..."/><di ky="463" rd="syntax/syntax_mm_glo_intro.htm|개요" ct=" 개요  사이즈가 큰 객체를 다루기 위해서는  glo  (Generalized Large Object) 클래스를 사용한다.  glo  클래스는 CUBRID에서 멀티미디어 지 ..."/><di ky="464" rd="syntax/syntax_mm_glo_method.htm|클래스에 정의된 메소드" ct=" 클래스에 정의된 메소드   설명  glo 클래스 메소드  glo 인스턴스 메소드   설명  glo  클래스는 CUBRID의  CALL METHOD   ..."/><di ky="465" rd="syntax/syntax_mm_glo_recovery.htm|복구" ct=" 복구  glo  복구 규칙은 다른 클래스 인스턴스처럼 강제적이다. 트랜잭션이 롤백되면,  glo (LO 와 FBO)의 어떤 갱신도 롤백된다. 트랜잭션이 커밋되었을 때 모든 ..."/><di ky="466" rd="syntax/syntax_operator_cast.htm|CAST 연산자" ct=" CAST 연산자  설명  CAST  연산자를  SELECT  문에서 어떤 값의 데이터 타입을 다른 데이터 타입으로 명시적으로 변환하는데 사용할 수 있다. 조회 리스트  ..."/><di ky="467" rd="syntax/syntax_operator_collection.htm|집합 연산자" ct=" 집합 연산자  집합 산술 연산자  SET ,  MULTISET ,  LIST(SEQUENCE)  타입에 대해 합집합, 차집합, 교집합을 구하기 위해서 각각 +, -,  ..."/><di ky="468" rd="syntax/syntax_operator_cond_case.htm|CASE" ct=" CASE  설명  CASE  수식은 CUBRID 문장 내에서 조건에 따라서 변하는 값을 얻고자 할 때 사용된다.  CASE  수식은 하나 또는 그 이상의 비교 수식과  ..."/><di ky="469" rd="syntax/syntax_operator_cond_decode.htm|DECODE 함수" ct=" DECODE 함수  설명  DECODE  함수는  IF-THEN-ELSE  문장과 같은 기능을 제공한다.  구문  DECODE (  expression ,  s ..."/><di ky="470" rd="syntax/syntax_operator_cond_greatest.htm|GREATEST 함수" ct=" GREATEST 함수  설명  GREATEST  함수는 인자 목록 중에서 가장 큰 값을 반환하는 함수이다.   구문  GREATEST (  expression ..."/><di ky="471" rd="syntax/syntax_operator_cond_least.htm|LEAST 함수" ct=" LEAST 함수  설명  LEAST  함수는 인자 리스트 중에서 가장 작은 값을 반환하는 함수이다.  구문  LEAST (  expression  [,  exp ..."/><di ky="472" rd="syntax/syntax_operator_cond_nullif.htm|NULLIF와 COALESCE" ct=" NULLIF와 COALESCE  설명  NULLIF 와  COALESCE 는 특정한 경우의  CASE  수식을 처리하기 위한 간단한 형태로 조건 수식의 특정한 형태로  ..."/><di ky="473" rd="syntax/syntax_operator_cond_nvl.htm|NVL, NVL2 함수" ct=" NVL, NVL2 함수  설명  NVL  함수와  NVL2  함수는  NULL 을 지정된 대체 값으로 바꾼다.  구문  NVL (  expr ,  expr2   ..."/><di ky="474" rd="syntax/syntax_operator_contain_contain.htm|포함 연산자" ct=" 포함 연산자  설명  포함 연산자는 집합 값들을 비교하는데 사용된다. 예를 들어, 동질의 또는 이질의 도메인을 가지는 집합 값 속성을 포함 연산자를 이용하여 특정 집합 ..."/><di ky="475" rd="syntax/syntax_operator_contain_seteq.htm|SETEQ 연산자" ct=" SETEQ 연산자  설명  SETEQ  연산자는 컬렉션 값 두 개가 서로 같은지 구분해 준다. 이 경우에 첫 번째 컬렉션이 비교되는 컬렉션과 같은 것으로 간주된다.  ..."/><di ky="476" rd="syntax/syntax_operator_contain_setneq.htm|SETNEQ 연산자" ct=" SETNEQ 연산자  설명  SETNEQ  연산자는 한 컬렉션 값이 다른 컬렉션 값과 같지 않은지 알려준다.  구문  collection_operand   SE ..."/><di ky="477" rd="syntax/syntax_operator_contain_subset.htm|SUBSET 연산자" ct=" SUBSET 연산자  설명  SUBSET  연산자는 한 컬렉션이 다른 컬렉션의 부분집합인지 알려준다. 즉, 첫 번째 컬렉션의 모든 원소들은 두 번째 컬렉션에 포함되어  ..."/><di ky="478" rd="syntax/syntax_operator_contain_subseteq.htm|SUBSETEQ 연산자" ct=" SUBSETEQ 연산자  설명  SUBSETEQ  연산자는 한 컬렉션이 다른 컬렉션의 부분집합이거나 혹은 같은지 알려준다. 첫 번째 컬렉션이 비교되는 컬렉션보다 작거나 ..."/><di ky="479" rd="syntax/syntax_operator_contain_superset.htm|SUPERSET 연산자" ct=" SUPERSET 연산자  설명  SUPERSET  연산자는 두 컬렉션을 비교할 때, 첫 번째 컬렉션 피연산자가 적어도 연산자의 오른쪽에 위치하는 컬렉션 피연산자의 모든 ..."/><di ky="480" rd="syntax/syntax_operator_contain_superseteq.htm|SUPERSETEQ 연산자" ct=" SUPERSETEQ 연산자  설명  SUPERSETEQ  연산자는 첫 번째 컬렉션이 두 번째 컬렉션과 같거나, 또는 첫 번째 컬렉션이 적어도 두 번째 컬렉션의 모든 값 ..."/><di ky="481" rd="syntax/syntax_operator_counter_groupbynum.htm|GROUPBY_NUM() 함수" ct=" GROUPBY_NUM() 함수  설명  GROUPBY_NUM()  함수는  ROWNUM  혹은  INST_NUM()  함수와 동일한 기능을 수행하나,  GROUP BY ..."/><di ky="482" rd="syntax/syntax_operator_counter_incr.htm|INCR과 DECR 함수" ct=" INCR과 DECR 함수  설명  INCR  함수는  SELECT  절에 포함되어 인자로 주어진 컬럼의 값을 1 증가시켜 주는 기능을 한다.  DECR  함수는 해당  ..."/><di ky="483" rd="syntax/syntax_operator_counter_orderbynum.htm|ORDERBY_NUM() 함수" ct=" ORDERBY_NUM() 함수  설명  ORDERBY_NUM()  함수는  ROWNUM  혹은  INST_NUM()  함수와 동일한 기능을 수행하나,  ORDER BY ..."/><di ky="484" rd="syntax/syntax_operator_counter_rownum.htm|ROWNUM, INST_NUM() 함수" ct=" ROWNUM/INST_NUM() 함수  설명  ROWNUM  함수는 질의 결과로 생성될 각 튜플에 대한 순서를 나타내는 번호를 반환한다. 첫 번째 결과 튜플은 1, 두 ..."/></ck>