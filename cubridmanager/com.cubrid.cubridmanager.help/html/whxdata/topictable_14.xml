<?xml version="1.0" encoding="UTF-8"?>
<ck><di ky="564" rd="syntax/syntax_retreive_opt_hint.htm|SQL 힌트 사용" ct=" SQL 힌트 사용   설명  질의에서  FROM  절에 나열된 테이블의 조인 순서는 질의 성능에 영향을 줄 수 있다. 만약 최적의 조인 순서를 결정 할 수 있다면, 질 ..."/><di ky="565" rd="syntax/syntax_retreive_opt_plan.htm|쿼리 실행 계획 보기" ct=" 쿼리 실행 계획 보기  설명  CUBRID SQL 질의에 대한 실행 계획(쿼리 플랜)을 보기 위해서는  SET OPTIMIZATION  구문을 이용해서 최적화 수준(o ..."/><di ky="566" rd="syntax/syntax_retreive_opt_statistics.htm|통계 정보 갱신" ct=" 통계 정보 갱신  설명  UPDATE STATISTICS ON  문은 질의 처리기에서 사용되는 내부 통계 정보를 생성한다. 이러한 통계 정보는 데이터베이스 시스템이 질 ..."/><di ky="567" rd="syntax/syntax_retreive_order.htm|ORDER BY 절" ct=" ORDER BY 절  설명  ORDER   BY  절은 질의 결과를 오름차순 또는 내림차순으로 정렬한다.  ORDER   BY  절을 사용할 때는 질의문의 마지막에 입 ..."/><di ky="568" rd="syntax/syntax_retreive_select.htm|SELECT" ct=" SELECT 절  설명  SELECT  절은 지정된 테이블에서 원하는 컬럼을 조회한다.  구문  SELECT  [  qualifier  ]  select_exp ..."/><di ky="569" rd="syntax/syntax_retreive_where.htm|WHERE" ct=" WHERE 절   일반  BETWEEN 조건식  비교 조건식  EXISTS 조건식  IN 조건식  LIKE 조건식  NULL 조건식  수량어 ..."/><di ky="570" rd="syntax/syntax_serial_alter.htm|SERIAL 변경" ct=" 시리얼 변경  설명  ALTER SERIAL  문을 이용하면 시리얼 값의 증가치를 갱신하고 시작 값, 최소 값, 최대 값을 설정하거나 제거할 수 있으며, 순환 속성을  ..."/><di ky="571" rd="syntax/syntax_serial_authority.htm|SERIAL 권한 부여" ct=" 시리얼 권한 부여  PUBLIC 을 포함한 어떤 사용자도 시리얼 객체를 생성할 수 있다. 일단 생성되면 모든 사용자들이  CURRENT_VALUE ,  NEXT_VALUE ..."/><di ky="572" rd="syntax/syntax_serial_create.htm|SERIAL 생성" ct=" 시리얼 생성  시리얼(SERIAL)은 고유한 순번을 생성하는 객체이다. 시리얼은 다음과 같은 특성을 갖는다.   시리얼은 다중 사용자 환경에서 고유한 순번을 생성하 ..."/><di ky="573" rd="syntax/syntax_serial_delete.htm|SERIAL 삭제" ct=" 시리얼 삭제  설명  DROP SERIAL  문으로 시리얼 객체를 데이터베이스에서 삭제할 수 있다.  구문  DROP SERIAL   serial_identif ..."/><di ky="574" rd="syntax/syntax_serial_update.htm|SERIAL을 읽고 갱신" ct=" 시리얼을 읽고 갱신  설명  시리얼은 시리얼 이름과 예약어를 질의 안에 삽입하여 읽고 갱신할 수 있다.  구문  serial_identifier . CURREN ..."/><di ky="575" rd="syntax/syntax_table_conflict_intro.htm|개요" ct=" 개요  데이터베이스의 스키마를 변경하면 상속 관련 클래스들 사이의 속성이나 메소드에서 충돌이 발생할 수 있다. 충돌하면 대부분, CUBRID에서 자동으로 해결되지만 그렇지 ..."/><di ky="576" rd="syntax/syntax_table_conflict_specifier.htm|해결 지시자" ct=" 해결 지시자  설명  데이터베이스 스키마를 변경하면, 기존 클래스나 속성 간의 충돌이나 상속 충돌이 발생할 수 있다. 시스템이 자동으로 충돌을 해결하지 못하거나 시스템 ..."/><di ky="577" rd="syntax/syntax_table_conflict_sub.htm|서브클래스 충돌" ct=" 서브클래스 충돌  클래스의 변경 사항은 모든 서브클래스에 자동으로 전파된다. 변화된 내용으로 인해 서브클래스에 문제가 발생한다면, CUBRID가 문제되는 서브클래스 충돌( ..."/><di ky="578" rd="syntax/syntax_table_conflict_super.htm|수퍼클래스 충돌" ct=" 수퍼클래스 충돌  수퍼클래스 추가  ALTER CLASS  구문에서  INHERIT  절은 선택 사항이지만 클래스의 변경에 의해 충돌이 발생할 경우에는 반드시 사용해야 ..."/><di ky="579" rd="syntax/syntax_table_create_col.htm|컬럼" ct=" 컬럼  컬럼은 테이블에서 각 열에 해당하는 항목이며, 컬럼은 컬럼 이름과 데이터 타입을 명시하여 정의한다.   컬럼 이름  컬럼의 초기값 설정(SHARED, D ..."/><di ky="580" rd="syntax/syntax_table_create_cond.htm|제약 조건" ct=" 제약 조건   NOT NULL 제약  UNIQUE 제약  PRIMARY KEY 제약  FOREIGN KEY 제약   NOT NULL 제약  설명 ..."/><di ky="581" rd="syntax/syntax_table_create_syntax.htm|CREATE TABLE (구문)" ct=" CREATE TABLE (구문)  설명  테이블 생성을 위해서  CREATE TABLE  구문을 이용한다.  구문  CREATE  {  CLASS  |  TAB ..."/><di ky="582" rd="syntax/syntax_table_delete.htm|테이블 삭제" ct=" 테이블 삭제  설명  DROP  구문을 이용하여 기존의 테이블을 삭제할 수 있다. 한  DROP  구문으로 여러 개의 테이블을 삭제할 수 있으며 테이블이 삭제되면 포함 ..."/><di ky="583" rd="syntax/syntax_table_inherit_add.htm|수퍼클래스 추가" ct=" 수퍼클래스 추가  설명  클래스의 상속은 클래스에 수퍼클래스를 추가하여 확장할 수 있다. 이미 존재하는 클래스에 수퍼클래스를 추가하여 두 클래스 사이에 관계를 생성한다 ..."/><di ky="584" rd="syntax/syntax_table_inherit_attr.htm|속성과 메소드 상속" ct=" 속성과 메소드 상속  설명  한 클래스의 서브클래스로 클래스를 생성하면 자동으로 클래스 계층 구조의 상위 클래스들의 모든 속성과 메소드를 상속받는다. 상속 시 발생할  ..."/><di ky="585" rd="syntax/syntax_table_inherit_class.htm|클래스 속성과 클래스 메소드" ct=" 클래스 속성과 클래스 메소드  클래스 객체나 클래스에 저장된 모든 인스턴스의 공통적인 특징을 저장하기 위한 클래스 속성을 생성할 수 있다. 클래스 메소드는 클래스 객체에  ..."/><di ky="586" rd="syntax/syntax_table_inherit_inherit.htm|상속" ct=" 상속  설명  CUBRID는 다중 상속을 허용한다. 다시 말해서 한 클래스는 하나 이상의 수퍼클래스로부터 속성과 메소드를 상속받을 수 있다. 그러나 상속은 수퍼클래스의 ..."/><di ky="587" rd="syntax/syntax_table_inherit_intro.htm|개요" ct=" 개요  CUBRID 데이터베이스에 있는 클래스들은 클래스 계층 구조를 가질 수 있으며 속성과 메소드는 계층 구조를 통해 상속될 수 있다.  Employee 클래스를 상 ..."/><di ky="588" rd="syntax/syntax_table_inherit_order.htm|상속을 위한 순서 규칙" ct=" 상속을 위한 순서 규칙  상속이 작용된 경우 다음 규칙들이 적용된다. 클래스라는 용어는 데이터베이스 내에서 클래스와 가상 클래스간 상속 개념을 서술할 때 일반적으로 사용된 ..."/><di ky="589" rd="syntax/syntax_table_inherit_remove.htm|수퍼클래스 삭제" ct=" 수퍼클래스 삭제  설명  클래스로부터 수퍼클래스를 삭제하는 것은 두 클래스 사이의 관계를 제거하는 것이다. 클래스에서 수퍼클래스를 삭제하면, 해당 클래스뿐만 아니라 그 ..."/><di ky="590" rd="syntax/syntax_table_invariantschema.htm|스키마 불변성" ct=" 스키마 불변성  데이터베이스 스키마 불변성은 항상(스키마 변경 전/후) 스키마가 지켜야 하는 스키마의 특징이다, 클래스 계층 불변성, 이름 불변성, 상속 불변성, 일관성의 ..."/><di ky="591" rd="syntax/syntax_table_mod_coladd.htm|컬럼 및 제약 조건 추가" ct=" 컬럼 및 제약 조건 추가  설명  컬럼 및 제약 조건은  ALTER  구문의  ADD  [ ATTRIBUTE  |  COLUMN ] 예약어를 사용하여 추가할 수 있다. ..."/><di ky="592" rd="syntax/syntax_table_mod_coldel.htm|컬럼 및 제약 조건 삭제" ct=" 컬럼 및 제약 조건 삭제  설명  ALTER  구문의  DROP  예약어를 사용하여 컬럼이나 제약 조건을 삭제할 수 있다. 한 번의  ALTER  구문으로 삭제할 수  ..."/><di ky="593" rd="syntax/syntax_table_mod_colmod.htm|컬럼 및 제약 조건 변경" ct=" 컬럼 및 제약 조건 변경  ALTER  구문을 이용하여 테이블의 컬럼 및 제약 조건을 추가, 변경, 삭제할 수 있다.   ..."/><di ky="594" rd="syntax/syntax_table_mod_colrename.htm|컬럼 이름 변경" ct=" 컬럼 이름 변경  설명  ALTER  구문의  RENAME  예약어를 사용하여 테이블이 생성된 후에 컬럼의 이름을 변경할 수 있다.  구문  ALTER  [  ..."/><di ky="595" rd="syntax/syntax_table_mod_default.htm|컬럼의 디폴트 값 변경" ct=" 컬럼의 디폴트 값 변경  설명  ALTER  구문의  CHANGE  예약어를 사용하여 디폴트 값이 없는 컬럼의 디폴트 값을 지정하거나 기존의 디폴트 값을 변경할 수 있 ..."/><di ky="596" rd="syntax/syntax_table_mod_rename.htm|테이블 이름 변경" ct=" 테이블 이름 변경  설명  테이블 이름은  RENAME  구문을 사용하여 변경할 수 있다.  구문  RENAME   [  TABLE  |  CLASS  |  V ..."/><di ky="597" rd="syntax/syntax_table_schemachange.htm|스키마 변경 규칙" ct=" 스키마 변경 규칙  스키마 불변성에서 항상 유지되어야 하는 스키마의 특성들에 대해 언급하였다. 스키마를 변경하는 방법은 몇 가지가 존재하며 이 방법들은 스키마 불변성을 유 ..."/><di ky="598" rd="syntax/syntax_tran_concurrency.htm|데이터베이스 동시성" ct=" 데이터베이스 동시성  다수의 사용자들이 데이터베이스에서 읽고 쓰는 권한을 가질 때, 한 명 이상의 사용자가 동시에 같은 데이터에 접근할 가능성이 있다. 데이터베이스의 무결 ..."/><di ky="599" rd="syntax/syntax_tran_intro.htm|개요" ct=" 개요  이 장에서는 트랜잭션을 커밋하거나 롤백하는 방법뿐만 아니라 동시성과 복구 이슈에 대하여 논의한다.  다중 사용자 환경에서 데이터베이스의 무결성을 보호하고 사용자 ..."/><di ky="600" rd="syntax/syntax_tran_isolation_getting.htm|격리 수준 값 얻기" ct=" 격리 수준 값 얻기  설명  GET TRANSACTION  문을 이용하여 현재 격리 수준 값을 얻을 수 있다. 아래는 격리 수준을 얻어오는 구문이다. 다음 구문에서는  ..."/></ck>