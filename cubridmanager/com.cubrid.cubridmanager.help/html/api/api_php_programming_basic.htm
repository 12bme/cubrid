
<html>
<head>
<title>일반 특징</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<link type="text/css" rel="stylesheet" href="../nhelp.css" />
<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
-->
</style>
<script type="text/javascript" language="javascript1.2" src="../whmsg.js"></script>
<script type="text/javascript" language="javascript" src="../whver.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whproxy.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whutils.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whlang.js"></script>
<script type="text/javascript" language="javascript1.2" src="../whtopic.js"></script>

 <meta name="generator" content="Adobe RoboHelp 8" />
</head>
<body><script type="text/javascript" language="javascript1.2">//<![CDATA[
<!--
if (window.gbWhTopic)
{
	var strUrl = document.location.href;
	var bc = 0;
	var n = strUrl.toLowerCase().indexOf("bc-");
	if(n != -1)
	{
		document.location.href = strUrl.substring(0, n);
		bc = strUrl.substring(n+3);
	}

	if (window.addTocInfo)
	{
	addTocInfo("API 레퍼런스\nPHP API\nPHP 프로그래밍\n일반 특징");
         if(strUrl.toLowerCase().indexOf("/help/")==-1){

    addButton("show",BTN_TEXT,"Show","","","","",0,0,"","","");

    }


	}
	if (window.writeBtnStyle)
		writeBtnStyle();

	if (window.writeIntopicBar)
		writeIntopicBar(1);if(strUrl.toLowerCase().indexOf("/help/")==-1){

         document.write("<p style=\"text-align:left\"> ");

AddMasterBreadcrumbs("../index.htm", "", "&nbsp;&gt;&nbsp;", "홈", "../cubrid.htm");

document.write("<a href=\"api.htm\">API 레퍼런스<\/a> &nbsp;&gt;&nbsp; <a href=\"api_php_programming_basic.htm\">PHP API<\/a> &nbsp;&gt;&nbsp; <a href=\"api_php_programming_basic.htm\">PHP 프로그래밍<\/a> &nbsp;&gt;&nbsp; 일반 특징<\/p>");}


	if (window.setRelStartPage)
	{
	setRelStartPage("../index.htm");

		autoSync(1);
		sendSyncInfo();
		sendAveInfoOut();
	}
}
else
	if (window.gbIE4)
		document.location.reload();

//-->
//]]></script>
<h4>일반 특징</h4>
<h6>연결/트랜잭션</h6>
<ul>
<li class="title">데이터베이스 연결</li>
<li class="desc">데이터베이스 응용에서 첫 단계는 cubrid_connect() 함수를 사용하는 것으로 데이터베이스 연결을 제공한다. cubrid_connect() 함수가&#160;성공적으로 수행되면, 데이터베이스를 사용할 수 있는 모든 함수를 사용할 수 있다. 응용을 완전히 끝내기 전에 cubrid_disconnect() 함수를 호출하는 것은 매우 중요하다. cubrid_disconnect() 함수는 현재 발생된 트랜잭션을 끝마치고 cubrid_connect() 함수에 의해 생성된 연결 핸들과 모든 요청 핸들을 종료한다.</li>
</ul>
<p class="note"><span class="note-title">참고</span> cubrid_connect() 함수를 사용한다고 해서&#160;데이터베이스 서버에 실제로 연결되는 것은 아니다. 데이터베이스 서버 연결이 필요한 함수가 호출되었을 때 실제로 연결이 이루어진다.</p>
<ul>
<li class="title">데이터베이스 트랜잭션</li>
<li class="desc">cubrid_commit() 이나 cubrid_rollback() 함수를 사용하여 트랜잭션을 커밋 또는 롤백 할 수 있다. &#160;cubrid_disconnect() 함수는 트랜잭션을 끝마치고 또한 언커밋 트랜잭션을 롤백한다.</li>
</ul>
<h6>질의 처리</h6>
<ul>
<li class="title">질의 실행</li>
<li class="desc">다음은 질의 실행을 위한 기본 단계이다.</li>
<li class="desc">a. 연결 핸들 생성</li>
<li class="desc">b. SQL 질의 요청에 대한 요청 핸들 생성</li>
<li class="desc">c. 결과 가져오기</li>
<li class="desc">d. 요청 핸들 종료</li>
</ul>
<p class="code">$con = cubrid_connect("192.168.1.12", 12345, "demodb");<br />
if($con) {<br />
&#160;&#160;&#160;$req = cubrid_execute($con, "select * from dept");<br />
&#160;&#160;&#160;if($req) {<br />
&#160;&#160;&#160;&#160;&#160;&#160;&#160;while ($row = cubrid_fetch($req)) {<br />
&#160;&#160;&#160;&#160;&#160;&#160;&#160;echo $row["name"];<br />
&#160;&#160;&#160;&#160;&#160;&#160;&#160;echo $row["position"];<br />
&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<br />
&#160;&#160;&#160;&#160;&#160;&#160;&#160;cubrid_close_request($req);<br />
&#160;&#160;&#160;}<br />
&#160;&#160;&#160;cubrid_disconnect($con);<br />
}</p>
<ul>
<li class="title">질의 결과의 열 타입과 이름</li>
<li class="desc">cubrid_column_types() 함수를 사용하여 열 타입이 들어있는 배열을 얻을 수 있고, cubrid_column_names() 함수를 사용하여&#160;열의 이름이 들어있는 배열을 얻을 수 있다.</li>
</ul>
<p class="code">$req = cubrid_execute($con, "select * from person");<br />
if($req) {<br />
&#160;&#160;&#160;$coltypes = cubrid_column_types($req);<br />
&#160;&#160;&#160;$colnames = cubrid_column_names($req);<br />
<br />
&#160;&#160;&#160;while (list($key, $coltype) = each ($coltypes))<br />
&#160;&#160;&#160;echo $coltype;<br />
<br />
&#160;&#160;&#160;while (list($key, $colname) = each ($colnames))<br />
&#160;&#160;&#160;echo $colname<br />
<br />
&#160;&#160;&#160;cubrid_close_request(#req);<br />
}</p>
<ul>
<li class="title">&#160;커서 조정</li>
<li class="desc">질의 결과의 위치를 설정할 수 있다. cubrid_move_cursor() 함수를 사용하여&#160;커서를 세 가지 포인트(질의 결과의 처음, 현재 커서 위치, 질의 결과의 끝) 중 한 포인트로부터 일정한 위치로 이동할 수 있다.</li>
</ul>
<p class="code">$req = cubrid_execute($con, "select * from person");<br />
if($req) {<br />
&#160;&#160;&#160;cubrid_move_cursor ($req, 10, CUBRID_CURSOR_CURRENT);<br />
&#160;&#160;&#160;while ($row = cubrid_fetch($req, CUBRID_ASSOC)) {<br />
&#160;&#160;&#160;&#160;&#160;&#160;&#160;echo $row["id"];<br />
&#160;&#160;&#160;&#160;&#160;&#160;&#160;echo $row["name"];<br />
&#160;&#160;&#160;}<br />
}</p>
<ul>
<li><span class="title">결과 배열 타입</span></li>
<li class="desc">cubrid_fetch() 함수의 결과에는 세가지 종류의 배열 타입 중 하나가 사용된다. cubrid_fetch() 함수가 호출될 때 배열의 타입을 결정할 수 있다. 그 중 하나인 연관배열은 문자열 색인을 사용한다. 두 번째로 수치배열은 숫자 순서 색인을 사용한다. 마지막 배열은 연관배열과 수치배열을 둘 다 포함한다.</li>
<li class="desc">a. 수치배열</li>
</ul>
<p class="code">while (list($id, $name) = cubrid_fetch($req, CUBRID_NUM)) {<br />
&#160;&#160;&#160;echo $id;<br />
&#160;&#160;&#160;echo $name;<br />
}</p>
<ul>
<li class="desc">b. 연관배열</li>
</ul>
<p class="code">while ($row = cubrid_fetch($req, CUBRID_ASSOC)) {<br />
&#160;&#160;&#160;echo $row["id"];<br />
&#160;&#160;&#160;echo $row["name"];<br />
}</p>
<h6>카탈로그 연산</h6>
<p>클래스, 가상 클래스, 속성, 메소드, 트리거, 제약 조건 등 데이터베이스의 스키마 정보는 cubrid_schema() 함수를 호출하여 얻을 수 있다. cubrid_schema() 함수의 리턴 값은 2차원 배열이다.</p>
<p class="code">$attrs=cubrid_schema($con,CUBRID_SCH_ATTRIBUTE,"person");<br />
if ($attrs != -1) {<br />
&#160;&#160;&#160;while (list ($key, $attr) = each($attrs)) {<br />
&#160;&#160;&#160;&#160;&#160;&#160;&#160;echo $row["NAME"];<br />
&#160;&#160;&#160;&#160;&#160;&#160;&#160;echo $row["DOMAIN"];<br />
&#160;&#160;&#160;}<br />
}</p>
<h6>에러 처리</h6>
<p>에러가 발생하면 대부분의 PHP 인터페이스 함수는 에러 메시지를 출력하고 false나 -1을 반환한다. cubrid_error_msg(), cubrid_error_code() 그리고 cubrid_error_code_facility() 함수를 사용하면&#160;각각 에러 메시지, 에러 코드, 에러 기능 코드를 확인할 수 있다.</p>
<p>cubrid_error_code_facility() 함수의 결과 값은 CUBRID_FACILITY_DBMS (DBMS 에러), CUBRID_FACILITY_CAS (CAS 서버 에러), CUBRID_FACILITY_CCI (CCI 에러), CUBRID_FACILITY_CLIENT (PHP 모듈 에러) 중 하나이다.</p>
<script type="text/javascript" language="javascript1.2">//<![CDATA[
<!--
if (window.writeIntopicBar)
	writeIntopicBar(0);


highlightSearch();
//-->
//]]></script>
</body>
</html>
