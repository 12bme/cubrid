#!/bin/sh
#
# 
# cubrid
#
# Description:	Manages an CUBRID Database as a High-Availability
#		resource
#
#
# Author:	Dejan Muhamedagic
# Support:	linux-ha@lists.linux-ha.org
# License:	GNU General Public License (GPL)
# Copyright:	(C) 2006 International Business Machines, Inc.
#
#		This code inspired by the DB2 resource script
#		written by Alan Robertson
#
# An example usage in /etc/ha.d/haresources: 
#       node1  10.0.0.170 cubrid-lw::demodb::/home/joe/cubrid-lw::joe
#
# See usage() function below for more details...
#
# OCF instance parameters:
#	OCF_RESKEY_database
#	OCF_RESKEY_logpath
#	OCF_RESKEY_syncmode
#	OCF_RESKEY_dbapasswd (optional)
#	OCF_RESKEY_home (optional; figure it out by checking HOME env)
#	OCF_RESKEY_dbpath (optional; figure it out by checking HOME env)
#	OCF_RESKEY_user (optional; figure it out by checking file ownership)
#
# Initialization:

. ${OCF_ROOT}/resource.d/heartbeat/.ocf-shellfuncs
PATH="$PATH:$CUBRID_HOME/bin"

#######################################################################

usage() {
  methods=`cubrid_methods`
  methods=`echo $methods | tr ' ' '|'`
  cat <<-!
	usage: $0 {$methods}

	$0 manages an CUBRID Database copylogdb as an HA resource.

	The 'start' operation starts the database.
	The 'stop' operation stops the database.
	The 'status' operation reports whether the database is running
	The 'monitor' operation reports whether the database seems to be working
	The 'validate-all' operation reports whether the parameters are valid
	The 'methods' operation reports on the methods $0 supports

	!
}

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="cubrid">
<version>1.0</version>

<longdesc lang="en">
Resource script for cubrid. Manages an CUBRID Database copylogdb
as an HA resource.
</longdesc>
<shortdesc lang="en">cubrid resource agent</shortdesc>

<parameters>

<parameter name="database" unique="1" required="1">
<longdesc lang="en">
The CUBRID Dababase name.
</longdesc>
<shortdesc lang="en">db</shortdesc>
<content type="string" default="" />
</parameter>

<parameter name="logpath" unique="1" required="1">
<longdesc lang="en">
The CUBRID Dababase log file path.
</longdesc>
<shortdesc lang="en">log</shortdesc>
<content type="string" default="" />
</parameter>

<parameter name="syncmode" unique="1" required="1">
<longdesc lang="en">
The CUBRID Dababase log sync mode.
</longdesc>
<shortdesc lang="en">mode</shortdesc>
<content type="string" default="async" />
</parameter>

<parameter name="dbapasswd" unique="1">
<longdesc lang="en">
The CUBRID Dababase DBA password.
</longdesc>
<shortdesc lang="en">passwd</shortdesc>
<content type="string" default="" />
</parameter>

<parameter name="home">
<longdesc lang="en">
The CUBRID home directory (aka CUBRID).
If not specified, then it is set to the HOME environment variable's value.
</longdesc>
<shortdesc lang="en">home</shortdesc>
<content type="string" default="" />
</parameter>

<parameter name="dbpath">
<longdesc lang="en">
The CUBRID databases directory (aka CUBRID_DATABASES).
If not specified, then it is set to the \$CUBRID/db.
</longdesc>
<shortdesc lang="en">dbpath</shortdesc>
<content type="string" default="" />
</parameter>

<parameter name="user" unique="0">
<longdesc lang="en">
The CUBRID owner.
If not specified, then it is set to the owner of
file \$CUBRID/bin/cubrid.
If this does not work for you, just set it explicitely.
</longdesc>
<shortdesc lang="en">user</shortdesc>
<content type="string" default="" />
</parameter>

</parameters>

<actions>
<action name="start" timeout="15" />
<action name="stop" timeout="15" />
<action name="status" timeout="5" />
<action name="monitor" depth="0" timeout="30" interval="120" start-delay="10" />
<action name="validate-all" timeout="5" />
<action name="methods" timeout="5" />
<action name="meta-data" timeout="5" />
</actions>
</resource-agent>
END
}


#
# methods: What methods/operations do we support?
#
cubrid_methods() {
  cat <<-!
	start
	stop
	status
	monitor
	validate-all
	methods
	meta-data
	usage
	!
}


#	Gather up information about our cubrid copylogdb
cubrid_info() {
	DATABASE_NAME=$1
	LOG_PATH=$2
	DBA_PASSWD=$4
	CUBRID_HOME=$5
	CUBRID_DBPATH=$6
	CUBRID_OWNER=$7

	# check SYNC_MODE
	case "$3" in
		async) SYNC_MODE=1;;
		semisync) SYNC_MODE=2;;
		sync) SYNC_MODE=3;;
		*)
			ocf_log err "CUBRID environment for logmode was broken"
			exit $OCF_ERR_ARGS
		;;
	esac
		
	# get CUBRID_HOME from $HOME if not set
	[ x = "x$CUBRID_HOME" ] &&
		CUBRID_HOME=$HOME

	# get CUBRID_DBPATH from $CUBRID_HOME/db if not set
	[ x = "x$CUBRID_DBPATH" ] &&
		CUBRID_DBPATH=$CUBRID_HOME/db

	# there a better way to find out CUBRID_OWNER?
	[ x = "x$CUBRID_OWNER" ] &&
		CUBRID_OWNER=`ls -ld $CUBRID_HOME/bin/cubrid 2>/dev/null | awk 'NR==1{print $3}'`
}

testcubridenv() {
	#	Let's make sure a few important things are set...
	[ x != "x$CUBRID_HOME" -a x != "x$CUBRID_OWNER" ] ||
		return 1
	#	and some important things are there
	check_binary cubrid

	# These don't seem to be used anywhere...
	check_binary csql

	return 0
}

setcubridenv() {
	CUBRID=$CUBRID_HOME
	CUBRID_DATABASES=$CUBRID_DBPATH
	LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$CUBRID/lib
	LIBPATH=$LD_LIBRARY_PATH
	PATH=$CUBRID/bin:$PATH
	export DATABASE_NAME CUBRID_HOME CUBRID_OWNER
	export CUBRID CUBRID_DATABASES
	export LD_LIBRARY_PATH LIBPATH PATH
	export LOG_PATH SYNC_MODE DBA_PASSWD
}


#
# cubrid_status: is the CUBRID copylogdb running?
#
# quick check to see if the copylogdb is up
is_cubrid_up() {
	ps -e -o pid,args | grep -v grep | grep -wqs "cub_admin copylogdb -L $LOG_PATH"
}

#
# cubrid_start: Start the CUBRID copylogdb
#

cubrid_start() {
	typeset status output
	if is_cubrid_up; then
		: nothing to be done, we can leave right now
		ocf_log info "CUBRID copylogdb $DATABASE_NAME ($LOG_PATH) already running"
		return $OCF_SUCCESS
	else
		output=`su $CUBRID_OWNER -c "cub_admin copylogdb -L ${LOG_PATH} -m ${SYNC_MODE} ${DATABASE_NAME} >& /dev/null &"`
	fi

	# wait for some sec
	sleep 3

	if is_cubrid_up
	then
		: cool, we are up and running
		ocf_log info "CUBRID copylogdb $DATABASE_NAME ($LOG_PATH) started: $output"
		return $OCF_SUCCESS
	else
		ocf_log err "CUBRID copylogdb $DATABASE_NAME ($LOG_PATH) not started: $output"
		return $OCF_ERR_GENERIC
	fi
}

#
# cubrid_stop: Stop the CUBRID copylogdb
#
cubrid_stop() {
	typeset status output
	if is_cubrid_up; then
		#output=`cubrid copylogdb stop ${DATABASE_NAME} >/dev/null 2>&1`
		echo ""
	else
		ocf_log info "CUBRID copylogdb $DATABASE_NAME ($LOG_PATH) already stopped"
		return $OCF_SUCCESS
	fi
	cubrid_kill  # kill any processes left
	if is_cubrid_up; then
		ocf_log err "CUBRID copylogdb $DATABASE_NAME ($LOG_PATH) not stopped: $output"
		return $OCF_ERR_GENERIC
	else
		ocf_log info "CUBRID copylogdb $DATABASE_NAME ($LOG_PATH) stopped: $output"
		sleep 1  # give em a chance to cleanup
		return $OCF_SUCCESS
	fi
}
# kill the database processes (if any left)
# give them 30 secs to exit cleanly (6 times 5)
killprocs() {
	typeset sig=$1
	shift 1
	kill -$sig $* >/dev/null 2>&1
}
cubrid_kill() {
	killprocs TERM `eval $procs | awk '{print $1}'`
	for i in 1 2; do
		killprocs 0 `eval $procs | awk '{print $1}'` ||
			return
		sleep 5
	done
	killprocs KILL `eval $procs | awk '{print $1}'`
}

#
# cubrid_monitor: Can the CUBRID copylogdb do anything useful?
#
cubrid_monitor() {
	if is_cubrid_up
	then
		#ocf_log info "CUBRID copylogdb $DATABASE_NAME ($LOG_PATH) is alive"
		return $OCF_SUCCESS
    else
		ocf_log info "CUBRID copylogdb $DATABASE_NAME ($LOG_PATH) is down"
		return $OCF_NOT_RUNNING
    fi
}

#
#	'main' starts here...
#

if [ $# -ne 1 ]
then
  usage
  exit $OCF_ERR_ARGS
fi

# These operations don't require OCF copylogdb parameters to be set
case "$1" in
  meta-data)	meta_data
		exit $OCF_SUCCESS;;

  usage) 	usage
		exit $OCF_SUCCESS;;

  methods)	cubrid_methods
		exit $?;;

  *);;
esac

if [ x = "x$OCF_RESKEY_database" ]
then
  ocf_log err "Please set OCF_RESKEY_database to the database name !"
  exit $OCF_ERR_ARGS
fi

if [ x = "x$OCF_RESKEY_logpath" ]
then
  ocf_log err "Please set OCF_RESKEY_logpath to the database log path !"
  exit $OCF_ERR_ARGS
elif [ ! -d $OCF_RESKEY_logpath ]
then
  if [ "x" != "x$OCF_RESKEY_user" ]
  then
    su $OCF_RESKEY_user -c "mkdir -p $OCF_RESKEY_logpath"
  else
    mkdir -p $OCF_RESKEY_logpath
  fi
  if [ $? -ne 0 ]
  then
    ocf_log err "Cannot create $OCF_RESKEY_logpath. Please check logpath."
    exit $OCF_ERR_ARGS
  fi
  if [ "x" != "x$OCF_RESKEY_user" ]
  then
    chown $OCF_RESKEY_user $OCF_RESKEY_logpath
  fi
fi

if [ x = "x$OCF_RESKEY_syncmode" ]
then
  ocf_log err "Please set OCF_RESKEY_syncmode to the database log sync mode !"
  exit $OCF_ERR_ARGS
fi

cubrid_info "$OCF_RESKEY_database" "$OCF_RESKEY_logpath" "$OCF_RESKEY_syncmode" "$OCF_RESKEY_dbapasswd" "$OCF_RESKEY_home" "$OCF_RESKEY_dbpath" "$OCF_RESKEY_user"

setcubridenv # important: set the environment for the SID

LSB_STATUS_STOPPED=3
if ! testcubridenv; then
	ocf_log info "CUBRID environment for DB $DATABASE_NAME does not exist"
	case "$1" in
		stop) exit $OCF_SUCCESS;;
		monitor) exit $OCF_NOT_RUNNING;;
		status) exit $LSB_STATUS_STOPPED;;
		*)
			ocf_log err "CUBRID environment for DB $DATABASE_NAME broken"
			exit $OCF_ERR_ARGS
		;;
	esac
fi

procs="ps -e -o pid,args | grep -v grep | grep -i \"cub_admin copylogdb -L $LOG_PATH\""

US=`id -u -n`
if [ $US != root -a $US != $CUBRID_OWNER ]
then
  ocf_log err "$0 must be run as root or $CUBRID_OWNER"
  exit $OCF_ERR_PERM
fi

# What kind of method was invoked?
case "$1" in

  start)	cubrid_start
		exit $?;;

  stop)		cubrid_stop
		exit $?;;

  status)	if is_cubrid_up
		then
		  echo "CUBRID copylogdb $DATABASE_NAME ($LOG_PATH) is running"
		  exit $OCF_SUCCESS
		else
		  echo "CUBRID copylogdb $DATABASE_NAME ($LOG_PATH) is stopped"
		  exit $OCF_NOT_RUNNING
		fi
		;;

  monitor)	cubrid_monitor
		exit $?;;

  validate-all)	# OCF_RESKEY_database was already checked by testcubridenv(),
		# just exit successfully here.
		exit $OCF_SUCCESS;;

  *)		cubrid_methods
		exit $OCF_ERR_UNIMPLEMENTED;;
esac

#
# vim:tabstop=4:shiftwidth=4:textwidth=0:wrapmargin=0
