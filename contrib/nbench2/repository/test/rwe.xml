<?xml version="1.0" encoding="UTF-8"?>
<benchmark
	name="Test rollback works when mix has transaction abort exception">
	<transaction-frame>
		<frame name="insert" impl="insert_impl">
			<input-map>
				<map name="table" type="STRING" />
				<map name="a" type="INTEGER" />
				<map name="b" type="INTEGER" />
			</input-map>
		</frame>
		
		<frame name="insertStat" impl="insertStat_impl">
			<input-map>
				<map name="k" type="STRING" />
				<map name="v" type="INTEGER" />
			</input-map>
		</frame>
		
	</transaction-frame>

	<transaction-common>
	</transaction-common>

	<transaction-definition>
		<transaction name="Test" sla="3000">
		
			// lazy create thread specific count object
			count_key = 'cnt_' + java.lang.Thread.currentThread().getId();
			
			cntObj = PRIVATE.getPrivateObject(count_key);

			if(cntObj == null)
			{
			  cntObj = new Object();
			  cntObj.count = 0;
			  PRIVATE.setPrivateObject(count_key, cntObj);
			}
			
			cntObj.count++;
			
			if(cntObj.count % 1000 == 0)
			{
			  Control.setAutoCommit(true);
			  Frame.insertStat(count_key, cntObj.count);
			}
			
			Control.setAutoCommit(false);

			Frame.insert('rwe_npk', cntObj.count, cntObj.count); // no primary key
			Frame.insert('rwe_pk', cntObj.count, cntObj.count); // has primary key

			Control.commit();

		</transaction>
	</transaction-definition>

	<transaction-mix>
		<mix name="mix1" nthread="5" target="Test" type="ratio"
			value="1" think-time="0" />
	</transaction-mix>
</benchmark>
