/*
 * Copyright (C) 2011 NHN Business Corporation. All rights reserved.
 *
 * nBase distributed database system for high availability, high scalability and high performance
 */

/*
 * nbase_errno.h - nBase error numbers
 */

#ifndef _NBASE_ERRNO_H_
#define _NBASE_ERRNO_H_

#ifdef __cplusplus
namespace nbase_t {
#endif

#define NE_SUCCESS		0

typedef enum {
	/* Errors possible to be returned to users */

	/* -1 ~ -4999 define errors caused by user's invalid arguments or misbehaviors 
	   such as wrong NSQL syntax. User receiving this error should be able to correct the invocation 
	   after reading detail description of the error in nBase manual.
	 */
	NE_NO_ERROR = NE_SUCCESS,
	NE_GENERIC_ERROR = -1,

	NE_NSQL_INVALID_TOKEN = -1000,
	NE_NSQL_NUMBER_OUT_OF_RANGE = -1001,
	NE_NSQL_INVALID_ESCAPE = -1002,
	NE_NSQL_INVALID_HEX_ESCAPE = -1003,
	NE_NSQL_INVALID_STRING = -1004,
	NE_NSQL_PARSER_ERROR = -1005,
	NE_NSQL_PARSER_STATE_OVERFLOW = -1006,
	NE_NSQL_LEXER_IDENTIFIER_TOO_LONG = -1007,
	NE_NSQL_LEXER_COMMENT_NOT_ALLOWED = -1008,
	NE_NSQL_EXCEED_MAX_NUM_OF_MULTI_STMT = -1009,
	NE_NSQL_EXCEED_MAX_QUERY_LENGTH = -1010,

	NE_VALIDATOR_READ_ONLY = -1100,
	NE_VALIDATOR_NO_OR = -1101,
	NE_VALIDATOR_INSERT_SINGLE_ROW_ONLY = -1102,
	NE_VALIDATOR_INSERT_MUST_HAVE_COLUMN_NAMES = -1103,
	NE_VALIDATOR_DELETE_MUST_HAVE_WHERE = -1104,
	NE_VALIDATOR_DELETE_MUST_USE_INDEX = -1105,
	NE_VALIDATOR_UPDATE_MUST_HAVE_WHERE = -1106,
	NE_VALIDATOR_UPDATE_MUST_USE_INDEX = -1107,
	NE_VALIDATOR_SELECT_MUST_HAVE_WHERE = -1108,
	NE_VALIDATOR_SELECT_ONLY_ONE_TABLE = -1109,
	NE_VALIDATOR_FEATURE_NOT_IMPLEMENTED = -1110,
	NE_VALIDATOR_DML_ONLY = -1111,
	NE_VALIDATOR_TABLE_MUST_HAVE_PRIMARY_KEY = -1112,
	NE_VALIDATOR_DDL_ONLY = -1113,
	NE_VALIDATOR_INSERT_UPDATE_DELETE_ONLY = -1114,
	NE_VALIDATOR_ORDERBY_REQUIRED = -1115,
	NE_VALIDATOR_LIMIT_REQUIRED= -1116,
	NE_VALIDATOR_SYSTEM_IDENTIFIER_NOT_ALLOWED= -1117,
	NE_VALIDATOR_GLOBAL_OPERATION_NOT_ALLOWED = -1118,
	NE_VALIDATOR_SELECT_ONLY_ALLOWED = -1119,
	NE_VALIDATOR_INVALID_QUERY_ALL_TABLES = -1120,

	NE_QE_DB_EXECUTE_DUE_TO_UNIQUE_VIOLATION = -1200,
	NE_QE_DB_EXECUTE_DUE_TO_DEADLOCK = -1201,
	NE_QE_RESULT_OVERFLOW = -1202,
	NE_QE_NO_MORE_RESULT = -1203,
	NE_QE_UNABLE_TO_EXECUTE_DDL = -1204,
	NE_QE_QUERY_TIMEOUT = -1205,
	NE_QE_LOCK_TIMEOUT = -1206,
	NE_QE_MULTI_TUPLE_UPDATE = -1207,
	NE_QE_DATA_OVERFLOW = -1208,

	NE_CAT_TABLE_EXISTS = -1300,
	NE_CAT_TABLE_NOT_EXISTS = -1301,
	NE_CAT_INDEX_EXISTS = -1302,
	NE_CAT_INDEX_NOT_EXISTS = -1303,
	NE_CAT_COLUMN_EXISTS = -1304,
	NE_CAT_COLUMN_NOT_EXISTS = -1305,
	NE_CAT_KEYSPACE_EXISTS = -1306,
	NE_CAT_KEYSPACE_NOT_EXISTS = -1307,
	NE_CAT_CKEY_NOT_EXISTS = -1308,
	NE_CAT_TABLE_SCOPE_MISMATCHED = -1309,
	NE_CAT_CANNOT_CHANGE_PRIMARY_KEY = -1310,
	NE_CAT_UID_EXISTS = -1311,
	NE_CAT_UID_NOT_EXISTS = -1312,

	/* -5000 ~ -9999 are nBase internal errors. 
	   There are no ways for users to correct these errors. 
	   Users must inform this situation to nBase administrator. */

	NE_QC_ERROR = -5000,
	NE_QC_CS_STATE_FAILED = -5001,
	NE_QC_JOB_FORK_FAILED = -5002,
	NE_QC_LOGGING_FAILED = -5003,
	NE_QC_INVALID_SVC_MODE = -5004,
	NE_QC_INCONSISTENT_STATE = -5005,
	NE_QC_REPLICATION_FAILED = -5006,

	/* executor */
	NE_QE_ERROR = -5100,
	NE_QE_JSON_INVALID_FORMAT = -5101,
	NE_QE_JSON_INVALID_TYPE = -5102,
	NE_QE_NSQL_INVALID_OP = -5103,
	NE_QE_NSQL_INVALID_EXPR = -5104,
	NE_QE_NSQL_INVALID_TYPE = -5105,
	NE_QE_CAUSALITY_VIOLATED = -5106,
	NE_QE_NSQL_UNSUPPORTED_QUERY_OBJECT = -5107,
	NE_QE_COUNTER_UPDATE_CAUSALITY_VIOLATED = -5108,

	NE_QE_DB_ERROR = -5200,
	NE_QE_DB_CONNECT = -5201,
	NE_QE_DB_PREPARE = -5202,
	NE_QE_DB_FETCH = -5203,
	NE_QE_DB_EXECUTE = -5204,
	NE_QE_DB_SEMANTIC = -5205,
	NE_QE_DB_DRIVER = -5206,
	NE_QE_DBMS = -5207,
	NE_QE_DB_SYNTAX = -5208,
	NE_QE_DB_INTERNAL = -5209,	

	NE_QE_DBCP_ERROR = -5300,
	NE_QE_DBCP_MAX_CONN_EXCEEDED = -5301,
	NE_QE_DBCP_NOTINIT = -5302,

	NE_MIG_INVAL_SRC = -5400,
	NE_MIG_INVAL_TGT = -5401,
	NE_MIG_NOREP = -5402,

	NE_TX_INVAL_ID = -5500,
	NE_TX_INVAL_DEST = -5501,


	/* -10000 ~ errors being only internally used in nbase and never being returned to user */
	/* json */
	NE_JSON_ERROR1 = -10000,
	NE_JSON_INVALID_NUMBER_FORMAT = -10001,
	NE_JSON_INVALID_STRING_FORMAT = -10002,
	NE_JSON_INVALID_ARRAY_FORMAT = -10003,
	NE_JSON_INVALID_OBJECT_FORMAT = -10004,
	NE_JSON_INVALID_VALUE_FORMAT = -10005,
	NE_JSON_ARRAY_OUT_OF_POSITION = -10006,
	NE_JSON_NOT_ARRAY = -10007,
	NE_JSON_NOT_OBJECT = -10008,
	NE_JSON_NOT_STRING = -10009,
	NE_JSON_NOT_NUMBER = -10010,
	NE_JSON_NOT_BOOLEAN = -10011,
	NE_JSON_NO_SUCH_PROPERTY = -10012,
	NE_JSON_PROPERTY_EXISTS = -10013,
	NE_JSON_NUMBER_OUT_OF_RANGE = -10014,
	NE_JSON_INSUFFICIENT_BUFFER = -10015,
	NE_JSON_INVALID_PATH_EXPR = -10016,
	NE_JSON_OP_NOT_DEFINED = -10017,
	NE_JSON_MULTIPLE_ADD_TARGET = -10018,

	/* lexer/parser */
	NE_PARSER_ERROR1 = -11000,
	NE_NSQL_PARSER_STATE_UNDERFLOW = -11001,


	/* validator */
	NE_VALIDATOR_ERROR1 = -12000,
	NE_VALIDATOR_DELETE_SINGLE_ROW_ONLY = -12001,
	NE_VALIDATOR_UPDATE_SINGLE_ROW_ONLY = -12002,
	NE_VALIDATOR_SELECT_NATURAL_ORDERBY_ONLY = -12003,
	NE_VALIDATOR_SELECT_JOIN_MUST_HAVE_OUTER = -12004,

	/* common */
	NE_INVAL = -13000,
	NE_NOENT = -13001,
	NE_NOPERM = -13002,
	NE_EXIST = -13003,
	NE_INVALCGMAP = -13004,
	NE_NOTINIT = -13005,
	NE_RPC = -13006,
	NE_STOPPED = -13007,
	NE_NOTSUPP = -13008,
	NE_FATAL = -13009,
	NE_NOMEM = -13010,
	NE_DISK = -13011,
	NE_CONN = -13012,
	NE_THREAD = -13013,
	NE_UPGRADE = -13014,


	/* schema handler */
	NE_SCHEMA_ERROR1 = -14000,

	/* producer consumer pool */
	NE_PROCON_ERROR1 = -15000,
	NE_PROCON_INTERRUPTED = -15001,
	NE_PROCON_TIMEOUT = -15002,
	NE_PROCON_NOENT = -15003,
	NE_PROCON_THREAD = -15004,
	NE_PROCON_UNINITIALIZED = -15005,

	/* catalog */
	NE_CAT_ERROR1 = -16000,
	NE_CAT_ALREADY_INITIALIZED = -16001,
	NE_CAT_NOT_INITIALIZED = -16002,
	NE_CAT_TRANSACTION_IN_PROGRESS = -16003,
	NE_CAT_INVALID_TRANSACTION = -16004,
	NE_CAT_INVALID_PATH_EXPR = -16005,
	NE_CAT_INVALID_DDL = -16006,
	NE_CAT_INALID_CREATE_TYPE = -16007,
	NE_CAT_LOG_NO_WRITE_ACCESS = -16008,
	NE_CAT_INVALID_LOG_LINE = -16009,
	NE_CAT_LOGGING_FAILED = -16010,
	NE_CAT_LOGFILE_OP = -16011,
	NE_CAT_GENERIC = -16012,
	NE_CAT_NO_SUCH_RESULT = -16013,
	NE_CAT_INCONSISTENT_CATALOG_STATUS = -16014,

	/* gc */
	NE_GC_JOB_EXISTS = -18000,
	NE_GC_JOB_CANCELLED = -18001,

	/* query admin */
	NE_QA_DDL_RUNNING = -19000,
	NE_QA_DDL_NOT_RUNNING = -19001,
	NE_QA_DDL_TXN_MISMATCH = -19002,
	NE_QA_DDL_ERROR = -19003,

	/* Errors being currently unused */
	NE_BUSY = -30000,
	NE_MISMATCH = -30001,
	NE_MUSTIGNORE = -30002,
	NE_AGAIN = -30003,
	NE_ACCESS = -30004,
	NE_OLD_VERSION = -30005,
	NE_LOCK = -30006,
	NE_NOTEMPTY = -30007,
	NE_NOTDIR = -30008,
	NE_ISDIR = -30009,
	NE_PROGRESS = -30010,
	NE_CHECKSUM = -30011,
	NE_NOREP = -30012,
	NE_NOSPC = -30013,
	NE_EDQUOT = -30014,
} nbase_errno_t;

#define NE_QE_DB_ERR(e)		((e)/100 == (-52))
#define NE_QE_USER_ERROR(e)	((e) >= -4999 && (e) < -1)

#define NE_QE_USER_COMMITABLE_ERROR(e)	(NE_QE_USER_ERROR(e) && (e) != NE_QE_DB_EXECUTE_DUE_TO_DEADLOCK && (e) != NE_QE_LOCK_TIMEOUT)
#define NE_QE_TX_ABORTED_ERROR(e)	((e) < 0 && !NE_QE_USER_COMMITABLE_ERROR(e))
// #define NE_QE_TX_ABORTED_ERROR(e) ((e) == NE_QE_DB_CONNECT || (e) == NE_QE_DB_EXECUTE_DUE_TO_DEADLOCK || (e) == NE_QE_LOCK_TIMEOUT || (e) == NE_QE_DBMS || (e) == NE_QE_DB_DRIVER)
#define NE_QE_DB_SYSTEM_ERR(e)	((e) == NE_QE_DB_CONNECT)
#define NE_ERROR(e)		(e < NE_SUCCESS)

#define NE_TX_ABORT_MARK				(-10000000)
#define NE_TX_SET_ABORT_MARK_BIT(ret)	(ret = ((ret > NE_TX_ABORT_MARK && ret < 0)? ret+NE_TX_ABORT_MARK: ret))
#define NE_TX_CLEAR_ABORT_MARK_BIT(ret)	(ret = ((ret < NE_TX_ABORT_MARK)? ret-NE_TX_ABORT_MARK: ret))
#define NE_TX_IS_ABORTED(ret) 			(ret < NE_TX_ABORT_MARK)

#ifdef __cplusplus
}
#endif

#endif							// _N_STORE_ERRNO_H_
