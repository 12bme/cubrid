# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_nbase_impl', [dirname(__file__)])
        except ImportError:
            import _nbase_impl
            return _nbase_impl
        if fp is not None:
            try:
                _mod = imp.load_module('_nbase_impl', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _nbase_impl = swig_import_helper()
    del swig_import_helper
else:
    import _nbase_impl
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


default_format = _nbase_impl.default_format
class nquery_res(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nquery_res, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nquery_res, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ptr"] = _nbase_impl.nquery_res_ptr_set
    __swig_getmethods__["ptr"] = _nbase_impl.nquery_res_ptr_get
    if _newclass:ptr = _swig_property(_nbase_impl.nquery_res_ptr_get, _nbase_impl.nquery_res_ptr_set)
    def __init__(self): 
        this = _nbase_impl.new_nquery_res()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nbase_impl.delete_nquery_res
    __del__ = lambda self : None;
nquery_res_swigregister = _nbase_impl.nquery_res_swigregister
nquery_res_swigregister(nquery_res)

class nm_rpc_mig_sum_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nm_rpc_mig_sum_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nm_rpc_mig_sum_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["res"] = _nbase_impl.nm_rpc_mig_sum_t_res_set
    __swig_getmethods__["res"] = _nbase_impl.nm_rpc_mig_sum_t_res_get
    if _newclass:res = _swig_property(_nbase_impl.nm_rpc_mig_sum_t_res_get, _nbase_impl.nm_rpc_mig_sum_t_res_set)
    __swig_setmethods__["n_q0"] = _nbase_impl.nm_rpc_mig_sum_t_n_q0_set
    __swig_getmethods__["n_q0"] = _nbase_impl.nm_rpc_mig_sum_t_n_q0_get
    if _newclass:n_q0 = _swig_property(_nbase_impl.nm_rpc_mig_sum_t_n_q0_get, _nbase_impl.nm_rpc_mig_sum_t_n_q0_set)
    __swig_setmethods__["n_runq"] = _nbase_impl.nm_rpc_mig_sum_t_n_runq_set
    __swig_getmethods__["n_runq"] = _nbase_impl.nm_rpc_mig_sum_t_n_runq_get
    if _newclass:n_runq = _swig_property(_nbase_impl.nm_rpc_mig_sum_t_n_runq_get, _nbase_impl.nm_rpc_mig_sum_t_n_runq_set)
    __swig_setmethods__["n_failed"] = _nbase_impl.nm_rpc_mig_sum_t_n_failed_set
    __swig_getmethods__["n_failed"] = _nbase_impl.nm_rpc_mig_sum_t_n_failed_get
    if _newclass:n_failed = _swig_property(_nbase_impl.nm_rpc_mig_sum_t_n_failed_get, _nbase_impl.nm_rpc_mig_sum_t_n_failed_set)
    __swig_setmethods__["concurrency"] = _nbase_impl.nm_rpc_mig_sum_t_concurrency_set
    __swig_getmethods__["concurrency"] = _nbase_impl.nm_rpc_mig_sum_t_concurrency_get
    if _newclass:concurrency = _swig_property(_nbase_impl.nm_rpc_mig_sum_t_concurrency_get, _nbase_impl.nm_rpc_mig_sum_t_concurrency_set)
    def __init__(self): 
        this = _nbase_impl.new_nm_rpc_mig_sum_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nbase_impl.delete_nm_rpc_mig_sum_t
    __del__ = lambda self : None;
nm_rpc_mig_sum_t_swigregister = _nbase_impl.nm_rpc_mig_sum_t_swigregister
nm_rpc_mig_sum_t_swigregister(nm_rpc_mig_sum_t)


def nc_admin_nbase_init():
  return _nbase_impl.nc_admin_nbase_init()
nc_admin_nbase_init = _nbase_impl.nc_admin_nbase_init

def nc_admin_set_console_out(*args):
  return _nbase_impl.nc_admin_set_console_out(*args)
nc_admin_set_console_out = _nbase_impl.nc_admin_set_console_out

def nc_admin_nbase_finalize():
  return _nbase_impl.nc_admin_nbase_finalize()
nc_admin_nbase_finalize = _nbase_impl.nc_admin_nbase_finalize

def nbase_query_opts(*args):
  return _nbase_impl.nbase_query_opts(*args)
nbase_query_opts = _nbase_impl.nbase_query_opts

def nbase_query(*args):
  return _nbase_impl.nbase_query(*args)
nbase_query = _nbase_impl.nbase_query

def nc_admin_query(*args):
  return _nbase_impl.nc_admin_query(*args)
nc_admin_query = _nbase_impl.nc_admin_query

def nbase_get_result_str(*args):
  return _nbase_impl.nbase_get_result_str(*args)
nbase_get_result_str = _nbase_impl.nbase_get_result_str

def nbase_get_result_code(*args):
  return _nbase_impl.nbase_get_result_code(*args)
nbase_get_result_code = _nbase_impl.nbase_get_result_code

def nbase_free_result(*args):
  return _nbase_impl.nbase_free_result(*args)
nbase_free_result = _nbase_impl.nbase_free_result

def no_print_error_short(*args):
  return _nbase_impl.no_print_error_short(*args)
no_print_error_short = _nbase_impl.no_print_error_short

def nc_admin_read_mbr_from(*args):
  return _nbase_impl.nc_admin_read_mbr_from(*args)
nc_admin_read_mbr_from = _nbase_impl.nc_admin_read_mbr_from

def nc_admin_read_cgmap_from(*args):
  return _nbase_impl.nc_admin_read_cgmap_from(*args)
nc_admin_read_cgmap_from = _nbase_impl.nc_admin_read_cgmap_from

def nc_admin_inject_fault(*args):
  return _nbase_impl.nc_admin_inject_fault(*args)
nc_admin_inject_fault = _nbase_impl.nc_admin_inject_fault

def nc_admin_clear_fault(*args):
  return _nbase_impl.nc_admin_clear_fault(*args)
nc_admin_clear_fault = _nbase_impl.nc_admin_clear_fault

def nc_admin_lc_get(*args):
  return _nbase_impl.nc_admin_lc_get(*args)
nc_admin_lc_get = _nbase_impl.nc_admin_lc_get

def nc_admin_lc_apply(*args):
  return _nbase_impl.nc_admin_lc_apply(*args)
nc_admin_lc_apply = _nbase_impl.nc_admin_lc_apply

def nc_admin_request_rebalance(*args):
  return _nbase_impl.nc_admin_request_rebalance(*args)
nc_admin_request_rebalance = _nbase_impl.nc_admin_request_rebalance

def nc_admin_get_nid_of_ckey(*args):
  return _nbase_impl.nc_admin_get_nid_of_ckey(*args)
nc_admin_get_nid_of_ckey = _nbase_impl.nc_admin_get_nid_of_ckey

def nc_get_mig_sum(*args):
  return _nbase_impl.nc_get_mig_sum(*args)
nc_get_mig_sum = _nbase_impl.nc_get_mig_sum

def nc_admin_is_txid_valid(*args):
  return _nbase_impl.nc_admin_is_txid_valid(*args)
nc_admin_is_txid_valid = _nbase_impl.nc_admin_is_txid_valid

def nc_admin_request_migration(*args):
  return _nbase_impl.nc_admin_request_migration(*args)
nc_admin_request_migration = _nbase_impl.nc_admin_request_migration

def nc_admin_get_id_ip_port_from(*args):
  return _nbase_impl.nc_admin_get_id_ip_port_from(*args)
nc_admin_get_id_ip_port_from = _nbase_impl.nc_admin_get_id_ip_port_from

def nc_admin_alloc_ns_rpc_tx_res_t():
  return _nbase_impl.nc_admin_alloc_ns_rpc_tx_res_t()
nc_admin_alloc_ns_rpc_tx_res_t = _nbase_impl.nc_admin_alloc_ns_rpc_tx_res_t

def nc_admin_free_ns_rpc_tx_res_t(*args):
  return _nbase_impl.nc_admin_free_ns_rpc_tx_res_t(*args)
nc_admin_free_ns_rpc_tx_res_t = _nbase_impl.nc_admin_free_ns_rpc_tx_res_t

def nc_admin_begin_tx(*args):
  return _nbase_impl.nc_admin_begin_tx(*args)
nc_admin_begin_tx = _nbase_impl.nc_admin_begin_tx

def nc_admin_query_opts_with_txid_for_test(*args):
  return _nbase_impl.nc_admin_query_opts_with_txid_for_test(*args)
nc_admin_query_opts_with_txid_for_test = _nbase_impl.nc_admin_query_opts_with_txid_for_test

def nc_admin_end_tx(*args):
  return _nbase_impl.nc_admin_end_tx(*args)
nc_admin_end_tx = _nbase_impl.nc_admin_end_tx

def nc_admin_get_ck_cgmapid_of_ckey(*args):
  return _nbase_impl.nc_admin_get_ck_cgmapid_of_ckey(*args)
nc_admin_get_ck_cgmapid_of_ckey = _nbase_impl.nc_admin_get_ck_cgmapid_of_ckey

def nc_admin_get_ck_hash_of_ckey(*args):
  return _nbase_impl.nc_admin_get_ck_hash_of_ckey(*args)
nc_admin_get_ck_hash_of_ckey = _nbase_impl.nc_admin_get_ck_hash_of_ckey

def nc_admin_get_replication_delay(*args):
  return _nbase_impl.nc_admin_get_replication_delay(*args)
nc_admin_get_replication_delay = _nbase_impl.nc_admin_get_replication_delay

def nc_admin_query_callback(*args):
  return _nbase_impl.nc_admin_query_callback(*args)
nc_admin_query_callback = _nbase_impl.nc_admin_query_callback

def nc_admin_tx_query_callback(*args):
  return _nbase_impl.nc_admin_tx_query_callback(*args)
nc_admin_tx_query_callback = _nbase_impl.nc_admin_tx_query_callback
class nc_cs_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nc_cs_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nc_cs_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ret"] = _nbase_impl.nc_cs_t_ret_set
    __swig_getmethods__["ret"] = _nbase_impl.nc_cs_t_ret_get
    if _newclass:ret = _swig_property(_nbase_impl.nc_cs_t_ret_get, _nbase_impl.nc_cs_t_ret_set)
    __swig_setmethods__["ip"] = _nbase_impl.nc_cs_t_ip_set
    __swig_getmethods__["ip"] = _nbase_impl.nc_cs_t_ip_get
    if _newclass:ip = _swig_property(_nbase_impl.nc_cs_t_ip_get, _nbase_impl.nc_cs_t_ip_set)
    __swig_setmethods__["port"] = _nbase_impl.nc_cs_t_port_set
    __swig_getmethods__["port"] = _nbase_impl.nc_cs_t_port_get
    if _newclass:port = _swig_property(_nbase_impl.nc_cs_t_port_get, _nbase_impl.nc_cs_t_port_set)
    def __init__(self): 
        this = _nbase_impl.new_nc_cs_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nbase_impl.delete_nc_cs_t
    __del__ = lambda self : None;
nc_cs_t_swigregister = _nbase_impl.nc_cs_t_swigregister
nc_cs_t_swigregister(nc_cs_t)


def nc_admin_register_cs_list(*args):
  return _nbase_impl.nc_admin_register_cs_list(*args)
nc_admin_register_cs_list = _nbase_impl.nc_admin_register_cs_list

def nc_admin_unregister_cs_list():
  return _nbase_impl.nc_admin_unregister_cs_list()
nc_admin_unregister_cs_list = _nbase_impl.nc_admin_unregister_cs_list

def nc_admin_get_rand_cs(*args):
  return _nbase_impl.nc_admin_get_rand_cs(*args)
nc_admin_get_rand_cs = _nbase_impl.nc_admin_get_rand_cs

def nc_admin_get_rand_slave_cs(*args):
  return _nbase_impl.nc_admin_get_rand_slave_cs(*args)
nc_admin_get_rand_slave_cs = _nbase_impl.nc_admin_get_rand_slave_cs

def nc_admin_get_nid_of_ckey_from(*args):
  return _nbase_impl.nc_admin_get_nid_of_ckey_from(*args)
nc_admin_get_nid_of_ckey_from = _nbase_impl.nc_admin_get_nid_of_ckey_from

def nc_admin_query_all(*args):
  return _nbase_impl.nc_admin_query_all(*args)
nc_admin_query_all = _nbase_impl.nc_admin_query_all

def nc_admin_query_all_ckey_list(*args):
  return _nbase_impl.nc_admin_query_all_ckey_list(*args)
nc_admin_query_all_ckey_list = _nbase_impl.nc_admin_query_all_ckey_list

def nc_admin_gc_start(*args):
  return _nbase_impl.nc_admin_gc_start(*args)
nc_admin_gc_start = _nbase_impl.nc_admin_gc_start

def nc_admin_empty_node(*args):
  return _nbase_impl.nc_admin_empty_node(*args)
nc_admin_empty_node = _nbase_impl.nc_admin_empty_node

def nc_admin_delete_node(*args):
  return _nbase_impl.nc_admin_delete_node(*args)
nc_admin_delete_node = _nbase_impl.nc_admin_delete_node

def nc_admin_add_node(*args):
  return _nbase_impl.nc_admin_add_node(*args)
nc_admin_add_node = _nbase_impl.nc_admin_add_node

def nc_admin_delete_cs(*args):
  return _nbase_impl.nc_admin_delete_cs(*args)
nc_admin_delete_cs = _nbase_impl.nc_admin_delete_cs

def nc_admin_add_cs(*args):
  return _nbase_impl.nc_admin_add_cs(*args)
nc_admin_add_cs = _nbase_impl.nc_admin_add_cs

def nc_admin_set_mbr_cs_state(*args):
  return _nbase_impl.nc_admin_set_mbr_cs_state(*args)
nc_admin_set_mbr_cs_state = _nbase_impl.nc_admin_set_mbr_cs_state

def nc_admin_get_dbinfo_detail(*args):
  return _nbase_impl.nc_admin_get_dbinfo_detail(*args)
nc_admin_get_dbinfo_detail = _nbase_impl.nc_admin_get_dbinfo_detail


